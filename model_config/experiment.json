{
  "_snapshotter": {
    "_snapshot_dir": "/home/mila/r/ramnath.kumar/Projects/Task-Structure-meta-RL/config/ate_ppo/point_mass/2021-12-17-023722",
    "_snapshot_mode": "last",
    "_snapshot_gap": 1,
    "$type": "garage.experiment.snapshotter.Snapshotter"
  },
  "_has_setup": true,
  "_plot": true,
  "_seed": 1,
  "_train_args": {
    "n_epochs": 150,
    "batch_size": 4096,
    "plot": true,
    "store_episodes": false,
    "pause_for_plot": false,
    "start_epoch": 0,
    "$type": "garage.trainer.TrainArgs"
  },
  "_stats": {
    "total_epoch": 0,
    "total_itr": 0,
    "total_env_steps": 0,
    "last_episode": "None",
    "$type": "garage.trainer.ExperimentStats"
  },
  "_algo": {
    "policy": {
      "_env_spec": {
        "max_episode_length": 100,
        "input_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            2
          ],
          "low": "array([-0.1, -0.1], dtype=float32)",
          "high": "array([0.1, 0.1], dtype=float32)",
          "bounded_below": "array([ True,  True])",
          "bounded_above": "array([ True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            3
          ],
          "low": "array([-inf, -inf, -inf], dtype=float32)",
          "high": "array([inf, inf, inf], dtype=float32)",
          "bounded_below": "array([False, False, False])",
          "bounded_above": "array([False, False, False])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "policy",
      "_encoder": {
        "_name": "embedding",
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
        "_cached_params": [
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_embedding_spec": {
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              4
            ],
            "low": "array([0., 0., 0., 0.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              4
            ],
            "low": "array([0., 0., 0., 0.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.InOutSpec"
        },
        "_hidden_sizes": [
          20,
          20
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 1407969796,
          "_random_generator": {
            "_seed": 1407969806,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
        "_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095295623,
          "_random_generator": {
            "_seed": 3095295628,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 0.1,
        "_min_std": 1e-06,
        "_max_std": 0.2,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "_latent_dim": 4.0,
        "_input_dim": 4.0,
        "_network": {
          "$type": "garage.tf.models.model.default"
        },
        "_f_dist": {
          "$type": "builtins.function"
        },
        "model": {
          "_name": "GaussianMLPModel",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
          "_cached_params": "None",
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "encoder": {
              "$type": "garage.tf.models.model.encoder"
            },
            "loss_policy": {
              "$type": "garage.tf.models.model.loss_policy"
            }
          },
          "_default_parameters": "None",
          "_hidden_sizes": [
            20,
            20
          ],
          "_output_dim": 4.0,
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_layer_normalization": false,
          "_init_std_param": -2.3025850929940455,
          "_min_std_param": -13.815510557964274,
          "_max_std_param": -1.6094379124341005,
          "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
        },
        "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
      },
      "_augmented_observation_space": {
        "dtype": "dtype('float32')",
        "_shape": [
          7
        ],
        "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
        "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
        "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
        "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "_hidden_sizes": [
        32,
        16
      ],
      "_hidden_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_hidden_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 3095543752,
        "_random_generator": {
          "_seed": 3095543758,
          "_force_generator": false,
          "_built": true,
          "_generator": "None",
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
      "_output_nonlinearity": "None",
      "_output_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 968962777,
        "_random_generator": {
          "_seed": 968962780,
          "_force_generator": false,
          "_built": true,
          "_generator": "None",
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
      "_learn_std": true,
      "_adaptive_std": false,
      "_std_share_network": true,
      "_init_std": 1.0,
      "_min_std": "None",
      "_max_std": 2.0,
      "_std_hidden_sizes": [
        32,
        32
      ],
      "_std_hidden_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_std_output_nonlinearity": "None",
      "_std_parameterization": "exp",
      "_layer_normalization": false,
      "obs_dim": 3.0,
      "action_dim": 2.0,
      "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
      "_cached_params": [
        "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
        "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
        "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
        "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
        "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
        "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
        "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
        "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
        "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
        "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
        "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
        "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
      ],
      "_cached_param_shapes": "None",
      "_networks": {
        "default": {
          "$type": "garage.tf.models.model.default"
        },
        "given_task": {
          "$type": "garage.tf.models.model.given_task"
        },
        "loss_policy": {
          "$type": "garage.tf.models.model.loss_policy"
        }
      },
      "_default_parameters": "None",
      "_output_dim": 2.0,
      "_std_hidden_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 3546074414,
        "_random_generator": {
          "_seed": 3546074414,
          "_force_generator": false,
          "_built": false,
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
      "_std_output_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 3967489603,
        "_random_generator": {
          "_seed": 3967489603,
          "_force_generator": false,
          "_built": false,
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_init_std_param": 0.0,
      "_min_std_param": "None",
      "_max_std_param": 0.6931471805599453,
      "_f_dist_obs_latent": {
        "$type": "builtins.function"
      },
      "_f_dist_obs_task": {
        "$type": "builtins.function"
      },
      "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
    },
    "_scope": "None",
    "max_episode_length": 100,
    "threshold": 150,
    "_env_spec": {
      "max_episode_length": 100,
      "input_space": {
        "dtype": "dtype('float32')",
        "_shape": [
          2
        ],
        "low": "array([-0.1, -0.1], dtype=float32)",
        "high": "array([0.1, 0.1], dtype=float32)",
        "bounded_below": "array([ True,  True])",
        "bounded_above": "array([ True,  True])",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "output_space": {
        "dtype": "dtype('float32')",
        "_shape": [
          3
        ],
        "low": "array([-inf, -inf, -inf], dtype=float32)",
        "high": "array([inf, inf, inf], dtype=float32)",
        "bounded_below": "array([False, False, False])",
        "bounded_above": "array([False, False, False])",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "$type": "garage._environment.EnvSpec"
    },
    "_baseline": {
      "_coeffs": "None",
      "_reg_coeff": 1e-05,
      "name": "LinearMultiFeatureBaseline",
      "lower_bound": -10,
      "upper_bound": 10,
      "_feature_names": [
        "observations",
        "tasks",
        "latents"
      ],
      "$type": "garage.np.baselines.linear_multi_feature_baseline.LinearMultiFeatureBaseline"
    },
    "_discount": 0.99,
    "_gae_lambda": 0.98,
    "_center_adv": true,
    "_positive_adv": false,
    "_fixed_horizon": false,
    "_name": "PPOTaskEmbedding",
    "_name_scope": "<tensorflow.python.framework.ops.name_scope_v2 object at 0x7fd1f86419d0>",
    "_old_policy": {
      "_env_spec": {
        "max_episode_length": 100,
        "input_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            2
          ],
          "low": "array([-0.1, -0.1], dtype=float32)",
          "high": "array([0.1, 0.1], dtype=float32)",
          "bounded_below": "array([ True,  True])",
          "bounded_above": "array([ True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            3
          ],
          "low": "array([-inf, -inf, -inf], dtype=float32)",
          "high": "array([inf, inf, inf], dtype=float32)",
          "bounded_below": "array([False, False, False])",
          "bounded_above": "array([False, False, False])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "old_policy",
      "_encoder": {
        "_name": "old_policy_encoder",
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd1f8641c10>",
        "_cached_params": "None",
        "_cached_param_shapes": "None",
        "_embedding_spec": {
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              4
            ],
            "low": "array([0., 0., 0., 0.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              4
            ],
            "low": "array([0., 0., 0., 0.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.InOutSpec"
        },
        "_hidden_sizes": [
          20,
          20
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 1407969796,
          "_random_generator": {
            "_seed": 1407969806,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
        "_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095295623,
          "_random_generator": {
            "_seed": 3095295628,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 0.1,
        "_min_std": 1e-06,
        "_max_std": 0.2,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "_latent_dim": 4.0,
        "_input_dim": 4.0,
        "_network": {
          "$type": "garage.tf.models.model.default"
        },
        "_f_dist": {
          "$type": "builtins.function"
        },
        "model": {
          "_name": "GaussianMLPModel",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd1f8641f10>",
          "_cached_params": "None",
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "encoder": {
              "$type": "garage.tf.models.model.encoder"
            },
            "loss_old_policy": {
              "$type": "garage.tf.models.model.loss_old_policy"
            }
          },
          "_default_parameters": "None",
          "_hidden_sizes": [
            20,
            20
          ],
          "_output_dim": 4.0,
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_layer_normalization": false,
          "_init_std_param": -2.3025850929940455,
          "_min_std_param": -13.815510557964274,
          "_max_std_param": -1.6094379124341005,
          "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
        },
        "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
      },
      "_augmented_observation_space": {
        "dtype": "dtype('float32')",
        "_shape": [
          7
        ],
        "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
        "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
        "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
        "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "_hidden_sizes": [
        32,
        16
      ],
      "_hidden_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_hidden_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 3095543752,
        "_random_generator": {
          "_seed": 3095543758,
          "_force_generator": false,
          "_built": true,
          "_generator": "None",
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
      "_output_nonlinearity": "None",
      "_output_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 968962777,
        "_random_generator": {
          "_seed": 968962780,
          "_force_generator": false,
          "_built": true,
          "_generator": "None",
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
      "_learn_std": true,
      "_adaptive_std": false,
      "_std_share_network": true,
      "_init_std": 1.0,
      "_min_std": "None",
      "_max_std": 2.0,
      "_std_hidden_sizes": [
        32,
        32
      ],
      "_std_hidden_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_std_output_nonlinearity": "None",
      "_std_parameterization": "exp",
      "_layer_normalization": false,
      "obs_dim": 3.0,
      "action_dim": 2.0,
      "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd1f8615190>",
      "_cached_params": "None",
      "_cached_param_shapes": "None",
      "_networks": {
        "default": {
          "$type": "garage.tf.models.model.default"
        },
        "given_task": {
          "$type": "garage.tf.models.model.given_task"
        },
        "loss_old_policy": {
          "$type": "garage.tf.models.model.loss_old_policy"
        }
      },
      "_default_parameters": "None",
      "_output_dim": 2.0,
      "_std_hidden_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 3546074414,
        "_random_generator": {
          "_seed": 3546074414,
          "_force_generator": false,
          "_built": false,
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
      "_std_output_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 3967489603,
        "_random_generator": {
          "_seed": 3967489603,
          "_force_generator": false,
          "_built": false,
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_init_std_param": 0.0,
      "_min_std_param": "None",
      "_max_std_param": 0.6931471805599453,
      "_f_dist_obs_latent": {
        "$type": "builtins.function"
      },
      "_f_dist_obs_task": {
        "$type": "builtins.function"
      },
      "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
    },
    "_use_softplus_entropy": true,
    "_stop_ce_gradient": true,
    "num_embedding_itr": 1,
    "num_policy_itr": 10,
    "num_inference_itr": 5,
    "best_return": "None",
    "_policy_optimizer": {
      "_opt_fun": {
        "_lazy_dict": {
          "f_loss": {
            "$type": "builtins.function"
          }
        },
        "_dict": {},
        "$type": "garage.tf.optimizers._dtypes.LazyDict"
      },
      "_target": {
        "_env_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "policy",
        "_encoder": {
          "_name": "embedding",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
          "_cached_params": [
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_embedding_spec": {
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.InOutSpec"
          },
          "_hidden_sizes": [
            20,
            20
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "_latent_dim": 4.0,
          "_input_dim": 4.0,
          "_network": {
            "$type": "garage.tf.models.model.default"
          },
          "_f_dist": {
            "$type": "builtins.function"
          },
          "model": {
            "_name": "GaussianMLPModel",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
            "_cached_params": "None",
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "encoder": {
                "$type": "garage.tf.models.model.encoder"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_hidden_sizes": [
              20,
              20
            ],
            "_output_dim": 4.0,
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_layer_normalization": false,
            "_init_std_param": -2.3025850929940455,
            "_min_std_param": -13.815510557964274,
            "_max_std_param": -1.6094379124341005,
            "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
          },
          "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
        },
        "_augmented_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            7
          ],
          "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
          "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
          "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
          "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_hidden_sizes": [
          32,
          16
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095543752,
          "_random_generator": {
            "_seed": 3095543758,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 968962777,
          "_random_generator": {
            "_seed": 968962780,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 1.0,
        "_min_std": "None",
        "_max_std": 2.0,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "obs_dim": 3.0,
        "action_dim": 2.0,
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
        "_cached_params": [
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "given_task": {
            "$type": "garage.tf.models.model.given_task"
          },
          "loss_policy": {
            "$type": "garage.tf.models.model.loss_policy"
          }
        },
        "_default_parameters": "None",
        "_output_dim": 2.0,
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_init_std_param": 0.0,
        "_min_std_param": "None",
        "_max_std_param": 0.6931471805599453,
        "_f_dist_obs_latent": {
          "$type": "builtins.function"
        },
        "_f_dist_obs_task": {
          "$type": "builtins.function"
        },
        "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
      },
      "_callback": "None",
      "_tf_optimizer": {
        "$typename": "tensorflow.python.training.adam.AdamOptimizer"
      },
      "_learning_rate": {
        "learning_rate": 0.0001
      },
      "_max_optimization_epochs": 10,
      "_tolerance": 1e-06,
      "_batch_size": 64,
      "_verbose": false,
      "_input_vars": [
        "<tf.Tensor 'inputs/obs:0' shape=(None, None, 3) dtype=float32>",
        "<tf.Tensor 'inputs/action:0' shape=(None, None, 2) dtype=float32>",
        "<tf.Tensor 'inputs/reward:0' shape=(None, None) dtype=float32>",
        "<tf.Tensor 'inputs/baseline:0' shape=(None, None) dtype=float32>",
        "<tf.Tensor 'inputs/Placeholder:0' shape=(None, None, 18) dtype=float32>",
        "<tf.Tensor 'inputs/task:0' shape=(None, None, 4) dtype=float32>",
        "<tf.Tensor 'inputs/Placeholder_1:0' shape=(None, None, 4) dtype=float32>",
        "<tf.Tensor 'inputs/valid:0' shape=(None, None) dtype=float32>"
      ],
      "_train_op": "<tf.Operation 'FirstOrderOptimizer/Adam' type=NoOp>",
      "_name": "FirstOrderOptimizer",
      "$type": "garage.tf.optimizers.first_order_optimizer.FirstOrderOptimizer"
    },
    "_encoder_optimizer": {
      "_opt_fun": {
        "_lazy_dict": {
          "f_loss": {
            "$type": "builtins.function"
          }
        },
        "_dict": {},
        "$type": "garage.tf.optimizers._dtypes.LazyDict"
      },
      "_target": {
        "_name": "embedding",
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
        "_cached_params": [
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_embedding_spec": {
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              4
            ],
            "low": "array([0., 0., 0., 0.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              4
            ],
            "low": "array([0., 0., 0., 0.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.InOutSpec"
        },
        "_hidden_sizes": [
          20,
          20
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 1407969796,
          "_random_generator": {
            "_seed": 1407969806,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
        "_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095295623,
          "_random_generator": {
            "_seed": 3095295628,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 0.1,
        "_min_std": 1e-06,
        "_max_std": 0.2,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "_latent_dim": 4.0,
        "_input_dim": 4.0,
        "_network": {
          "$type": "garage.tf.models.model.default"
        },
        "_f_dist": {
          "$type": "builtins.function"
        },
        "model": {
          "_name": "GaussianMLPModel",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
          "_cached_params": "None",
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "encoder": {
              "$type": "garage.tf.models.model.encoder"
            },
            "loss_policy": {
              "$type": "garage.tf.models.model.loss_policy"
            }
          },
          "_default_parameters": "None",
          "_hidden_sizes": [
            20,
            20
          ],
          "_output_dim": 4.0,
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_layer_normalization": false,
          "_init_std_param": -2.3025850929940455,
          "_min_std_param": -13.815510557964274,
          "_max_std_param": -1.6094379124341005,
          "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
        },
        "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
      },
      "_callback": "None",
      "_tf_optimizer": {
        "$typename": "tensorflow.python.training.adam.AdamOptimizer"
      },
      "_learning_rate": {
        "learning_rate": 0.0001
      },
      "_max_optimization_epochs": 10,
      "_tolerance": 1e-06,
      "_batch_size": 64,
      "_verbose": false,
      "_input_vars": [
        "<tf.Tensor 'inputs/obs:0' shape=(None, None, 3) dtype=float32>",
        "<tf.Tensor 'inputs/action:0' shape=(None, None, 2) dtype=float32>",
        "<tf.Tensor 'inputs/reward:0' shape=(None, None) dtype=float32>",
        "<tf.Tensor 'inputs/baseline:0' shape=(None, None) dtype=float32>",
        "<tf.Tensor 'inputs/Placeholder:0' shape=(None, None, 18) dtype=float32>",
        "<tf.Tensor 'inputs/task:0' shape=(None, None, 4) dtype=float32>",
        "<tf.Tensor 'inputs/Placeholder_1:0' shape=(None, None, 4) dtype=float32>",
        "<tf.Tensor 'inputs/valid:0' shape=(None, None) dtype=float32>"
      ],
      "_train_op": "<tf.Operation 'FirstOrderOptimizer_1/Adam' type=NoOp>",
      "_name": "FirstOrderOptimizer",
      "$type": "garage.tf.optimizers.first_order_optimizer.FirstOrderOptimizer"
    },
    "_lr_clip_range": 0.2,
    "_max_kl_step": 0.01,
    "_policy_ent_coeff": 0.001,
    "_inference": {
      "_name": "inference",
      "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd220128dd0>",
      "_cached_params": [
        "<tf.Variable 'inference/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(18, 20) dtype=float32>",
        "<tf.Variable 'inference/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
        "<tf.Variable 'inference/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
        "<tf.Variable 'inference/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
        "<tf.Variable 'inference/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
        "<tf.Variable 'inference/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
      ],
      "_cached_param_shapes": "None",
      "_embedding_spec": {
        "input_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            6,
            3
          ],
          "low": "array([[-inf, -inf, -inf],\n       [-inf, -inf, -inf],\n       [-inf, -inf, -inf],\n       [-inf, -inf, -inf],\n       [-inf, -inf, -inf],\n       [-inf, -inf, -inf]], dtype=float32)",
          "high": "array([[inf, inf, inf],\n       [inf, inf, inf],\n       [inf, inf, inf],\n       [inf, inf, inf],\n       [inf, inf, inf],\n       [inf, inf, inf]], dtype=float32)",
          "bounded_below": "array([[False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False]])",
          "bounded_above": "array([[False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False]])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            4
          ],
          "low": "array([0., 0., 0., 0.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.InOutSpec"
      },
      "_hidden_sizes": [
        20,
        20
      ],
      "_hidden_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_hidden_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 1407969796,
        "_random_generator": {
          "_seed": 1407969806,
          "_force_generator": false,
          "_built": true,
          "_generator": "None",
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
      "_output_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_output_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 3095295623,
        "_random_generator": {
          "_seed": 3095295628,
          "_force_generator": false,
          "_built": true,
          "_generator": "None",
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
      "_learn_std": true,
      "_adaptive_std": false,
      "_std_share_network": true,
      "_init_std": 0.1,
      "_min_std": 1e-06,
      "_max_std": "None",
      "_std_hidden_sizes": [
        32,
        32
      ],
      "_std_hidden_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_std_output_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_std_parameterization": "exp",
      "_layer_normalization": false,
      "_latent_dim": 4.0,
      "_input_dim": 18.0,
      "_network": {
        "$type": "garage.tf.models.model.default"
      },
      "_f_dist": {
        "$type": "builtins.function"
      },
      "model": {
        "_name": "GaussianMLPModel",
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd220096ad0>",
        "_cached_params": "None",
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "loss_infer": {
            "$type": "garage.tf.models.model.loss_infer"
          }
        },
        "_default_parameters": "None",
        "_hidden_sizes": [
          20,
          20
        ],
        "_output_dim": 4.0,
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_init_std": 0.1,
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 1407969796,
          "_random_generator": {
            "_seed": 1407969806,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
        "_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095295623,
          "_random_generator": {
            "_seed": 3095295628,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
        "_layer_normalization": false,
        "_init_std_param": -2.3025850929940455,
        "_min_std_param": -13.815510557964274,
        "_max_std_param": "None",
        "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
      },
      "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
    },
    "_old_inference": {
      "_name": "old_inference",
      "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd1f84c4f90>",
      "_cached_params": "None",
      "_cached_param_shapes": "None",
      "_embedding_spec": {
        "input_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            6,
            3
          ],
          "low": "array([[-inf, -inf, -inf],\n       [-inf, -inf, -inf],\n       [-inf, -inf, -inf],\n       [-inf, -inf, -inf],\n       [-inf, -inf, -inf],\n       [-inf, -inf, -inf]], dtype=float32)",
          "high": "array([[inf, inf, inf],\n       [inf, inf, inf],\n       [inf, inf, inf],\n       [inf, inf, inf],\n       [inf, inf, inf],\n       [inf, inf, inf]], dtype=float32)",
          "bounded_below": "array([[False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False]])",
          "bounded_above": "array([[False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False]])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            4
          ],
          "low": "array([0., 0., 0., 0.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.InOutSpec"
      },
      "_hidden_sizes": [
        20,
        20
      ],
      "_hidden_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_hidden_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 1407969796,
        "_random_generator": {
          "_seed": 1407969806,
          "_force_generator": false,
          "_built": true,
          "_generator": "None",
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
      "_output_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_output_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 3095295623,
        "_random_generator": {
          "_seed": 3095295628,
          "_force_generator": false,
          "_built": true,
          "_generator": "None",
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
      "_learn_std": true,
      "_adaptive_std": false,
      "_std_share_network": true,
      "_init_std": 0.1,
      "_min_std": 1e-06,
      "_max_std": "None",
      "_std_hidden_sizes": [
        32,
        32
      ],
      "_std_hidden_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_std_output_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_std_parameterization": "exp",
      "_layer_normalization": false,
      "_latent_dim": 4.0,
      "_input_dim": 18.0,
      "_network": {
        "$type": "garage.tf.models.model.default"
      },
      "_f_dist": {
        "$type": "builtins.function"
      },
      "model": {
        "_name": "GaussianMLPModel",
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd1f82c9190>",
        "_cached_params": "None",
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "loss_old_infer": {
            "$type": "garage.tf.models.model.loss_old_infer"
          }
        },
        "_default_parameters": "None",
        "_hidden_sizes": [
          20,
          20
        ],
        "_output_dim": 4.0,
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_init_std": 0.1,
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 1407969796,
          "_random_generator": {
            "_seed": 1407969806,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
        "_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095295623,
          "_random_generator": {
            "_seed": 3095295628,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
        "_layer_normalization": false,
        "_init_std_param": -2.3025850929940455,
        "_min_std_param": -13.815510557964274,
        "_max_std_param": "None",
        "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
      },
      "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
    },
    "inference_ce_coeff": 0.05,
    "inference_optimizer": {
      "_opt_fun": {
        "_lazy_dict": {
          "f_loss": {
            "$type": "builtins.function"
          }
        },
        "_dict": {},
        "$type": "garage.tf.optimizers._dtypes.LazyDict"
      },
      "_target": {
        "_name": "inference",
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd220128dd0>",
        "_cached_params": [
          "<tf.Variable 'inference/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(18, 20) dtype=float32>",
          "<tf.Variable 'inference/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'inference/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'inference/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'inference/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'inference/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_embedding_spec": {
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              6,
              3
            ],
            "low": "array([[-inf, -inf, -inf],\n       [-inf, -inf, -inf],\n       [-inf, -inf, -inf],\n       [-inf, -inf, -inf],\n       [-inf, -inf, -inf],\n       [-inf, -inf, -inf]], dtype=float32)",
            "high": "array([[inf, inf, inf],\n       [inf, inf, inf],\n       [inf, inf, inf],\n       [inf, inf, inf],\n       [inf, inf, inf],\n       [inf, inf, inf]], dtype=float32)",
            "bounded_below": "array([[False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False]])",
            "bounded_above": "array([[False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False],\n       [False, False, False]])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              4
            ],
            "low": "array([0., 0., 0., 0.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.InOutSpec"
        },
        "_hidden_sizes": [
          20,
          20
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 1407969796,
          "_random_generator": {
            "_seed": 1407969806,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
        "_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095295623,
          "_random_generator": {
            "_seed": 3095295628,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 0.1,
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "_latent_dim": 4.0,
        "_input_dim": 18.0,
        "_network": {
          "$type": "garage.tf.models.model.default"
        },
        "_f_dist": {
          "$type": "builtins.function"
        },
        "model": {
          "_name": "GaussianMLPModel",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd220096ad0>",
          "_cached_params": "None",
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "loss_infer": {
              "$type": "garage.tf.models.model.loss_infer"
            }
          },
          "_default_parameters": "None",
          "_hidden_sizes": [
            20,
            20
          ],
          "_output_dim": 4.0,
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_layer_normalization": false,
          "_init_std_param": -2.3025850929940455,
          "_min_std_param": -13.815510557964274,
          "_max_std_param": "None",
          "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
        },
        "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
      },
      "_callback": "None",
      "_tf_optimizer": {
        "$typename": "tensorflow.python.training.adam.AdamOptimizer"
      },
      "_learning_rate": {
        "learning_rate": 0.001
      },
      "_max_optimization_epochs": 10,
      "_tolerance": 1e-06,
      "_batch_size": 64,
      "_verbose": false,
      "_input_vars": [
        "<tf.Tensor 'inputs/Placeholder_1:0' shape=(None, None, 4) dtype=float32>",
        "<tf.Tensor 'inputs/Placeholder:0' shape=(None, None, 18) dtype=float32>",
        "<tf.Tensor 'inputs/valid:0' shape=(None, None) dtype=float32>"
      ],
      "_train_op": "<tf.Operation 'FirstOrderOptimizer_2/Adam' type=NoOp>",
      "_name": "FirstOrderOptimizer",
      "$type": "garage.tf.optimizers.first_order_optimizer.FirstOrderOptimizer"
    },
    "encoder_ent_coeff": 1000.0,
    "_f_rewards": {
      "$type": "builtins.function"
    },
    "_f_returns": {
      "$type": "builtins.function"
    },
    "_f_policy_kl": {
      "$type": "builtins.function"
    },
    "_f_policy_entropy": {
      "$type": "builtins.function"
    },
    "_f_encoder_kl": {
      "$type": "builtins.function"
    },
    "_f_encoder_entropy": {
      "$type": "builtins.function"
    },
    "_f_task_entropies": "None",
    "_f_inference_ce": {
      "$type": "builtins.function"
    },
    "_policy_network": {
      "$type": "garage.tf.models.model.loss_policy"
    },
    "_old_policy_network": {
      "$type": "garage.tf.models.model.loss_old_policy"
    },
    "_encoder_network": {
      "$type": "garage.tf.models.model.loss_policy"
    },
    "_old_encoder_network": {
      "$type": "garage.tf.models.model.loss_old_policy"
    },
    "_infer_network": {
      "$type": "garage.tf.models.model.loss_infer"
    },
    "_old_infer_network": {
      "$type": "garage.tf.models.model.loss_old_infer"
    },
    "_sampler": {
      "_factory": {
        "n_workers": 10,
        "_seed": "None",
        "_max_episode_length": 100,
        "_worker_class": {
          "_wrapped_class": {
            "$typename": "garage.tf.algos.te.TaskEmbeddingWorker"
          },
          "$type": "garage.tf.samplers.worker.TFWorkerClassWrapper"
        },
        "_worker_args": {},
        "$type": "garage.sampler.worker_factory.WorkerFactory"
      },
      "_agents": [
        {
          "_env_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "policy",
          "_encoder": {
            "_name": "embedding",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
            "_cached_params": [
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_embedding_spec": {
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.InOutSpec"
            },
            "_hidden_sizes": [
              20,
              20
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "_latent_dim": 4.0,
            "_input_dim": 4.0,
            "_network": {
              "$type": "garage.tf.models.model.default"
            },
            "_f_dist": {
              "$type": "builtins.function"
            },
            "model": {
              "_name": "GaussianMLPModel",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
              "_cached_params": "None",
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "encoder": {
                  "$type": "garage.tf.models.model.encoder"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_hidden_sizes": [
                20,
                20
              ],
              "_output_dim": 4.0,
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_layer_normalization": false,
              "_init_std_param": -2.3025850929940455,
              "_min_std_param": -13.815510557964274,
              "_max_std_param": -1.6094379124341005,
              "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
            },
            "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
          },
          "_augmented_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              7
            ],
            "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
            "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
            "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
            "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_hidden_sizes": [
            32,
            16
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095543752,
            "_random_generator": {
              "_seed": 3095543758,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 968962777,
            "_random_generator": {
              "_seed": 968962780,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 1.0,
          "_min_std": "None",
          "_max_std": 2.0,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "obs_dim": 3.0,
          "action_dim": 2.0,
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
          "_cached_params": [
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "given_task": {
              "$type": "garage.tf.models.model.given_task"
            },
            "loss_policy": {
              "$type": "garage.tf.models.model.loss_policy"
            }
          },
          "_default_parameters": "None",
          "_output_dim": 2.0,
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_init_std_param": 0.0,
          "_min_std_param": "None",
          "_max_std_param": 0.6931471805599453,
          "_f_dist_obs_latent": {
            "$type": "builtins.function"
          },
          "_f_dist_obs_task": {
            "$type": "builtins.function"
          },
          "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
        },
        {
          "_env_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "policy",
          "_encoder": {
            "_name": "embedding",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
            "_cached_params": [
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_embedding_spec": {
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.InOutSpec"
            },
            "_hidden_sizes": [
              20,
              20
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "_latent_dim": 4.0,
            "_input_dim": 4.0,
            "_network": {
              "$type": "garage.tf.models.model.default"
            },
            "_f_dist": {
              "$type": "builtins.function"
            },
            "model": {
              "_name": "GaussianMLPModel",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
              "_cached_params": "None",
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "encoder": {
                  "$type": "garage.tf.models.model.encoder"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_hidden_sizes": [
                20,
                20
              ],
              "_output_dim": 4.0,
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_layer_normalization": false,
              "_init_std_param": -2.3025850929940455,
              "_min_std_param": -13.815510557964274,
              "_max_std_param": -1.6094379124341005,
              "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
            },
            "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
          },
          "_augmented_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              7
            ],
            "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
            "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
            "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
            "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_hidden_sizes": [
            32,
            16
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095543752,
            "_random_generator": {
              "_seed": 3095543758,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 968962777,
            "_random_generator": {
              "_seed": 968962780,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 1.0,
          "_min_std": "None",
          "_max_std": 2.0,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "obs_dim": 3.0,
          "action_dim": 2.0,
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
          "_cached_params": [
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "given_task": {
              "$type": "garage.tf.models.model.given_task"
            },
            "loss_policy": {
              "$type": "garage.tf.models.model.loss_policy"
            }
          },
          "_default_parameters": "None",
          "_output_dim": 2.0,
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_init_std_param": 0.0,
          "_min_std_param": "None",
          "_max_std_param": 0.6931471805599453,
          "_f_dist_obs_latent": {
            "$type": "builtins.function"
          },
          "_f_dist_obs_task": {
            "$type": "builtins.function"
          },
          "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
        },
        {
          "_env_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "policy",
          "_encoder": {
            "_name": "embedding",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
            "_cached_params": [
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_embedding_spec": {
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.InOutSpec"
            },
            "_hidden_sizes": [
              20,
              20
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "_latent_dim": 4.0,
            "_input_dim": 4.0,
            "_network": {
              "$type": "garage.tf.models.model.default"
            },
            "_f_dist": {
              "$type": "builtins.function"
            },
            "model": {
              "_name": "GaussianMLPModel",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
              "_cached_params": "None",
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "encoder": {
                  "$type": "garage.tf.models.model.encoder"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_hidden_sizes": [
                20,
                20
              ],
              "_output_dim": 4.0,
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_layer_normalization": false,
              "_init_std_param": -2.3025850929940455,
              "_min_std_param": -13.815510557964274,
              "_max_std_param": -1.6094379124341005,
              "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
            },
            "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
          },
          "_augmented_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              7
            ],
            "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
            "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
            "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
            "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_hidden_sizes": [
            32,
            16
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095543752,
            "_random_generator": {
              "_seed": 3095543758,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 968962777,
            "_random_generator": {
              "_seed": 968962780,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 1.0,
          "_min_std": "None",
          "_max_std": 2.0,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "obs_dim": 3.0,
          "action_dim": 2.0,
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
          "_cached_params": [
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "given_task": {
              "$type": "garage.tf.models.model.given_task"
            },
            "loss_policy": {
              "$type": "garage.tf.models.model.loss_policy"
            }
          },
          "_default_parameters": "None",
          "_output_dim": 2.0,
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_init_std_param": 0.0,
          "_min_std_param": "None",
          "_max_std_param": 0.6931471805599453,
          "_f_dist_obs_latent": {
            "$type": "builtins.function"
          },
          "_f_dist_obs_task": {
            "$type": "builtins.function"
          },
          "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
        },
        {
          "_env_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "policy",
          "_encoder": {
            "_name": "embedding",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
            "_cached_params": [
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_embedding_spec": {
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.InOutSpec"
            },
            "_hidden_sizes": [
              20,
              20
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "_latent_dim": 4.0,
            "_input_dim": 4.0,
            "_network": {
              "$type": "garage.tf.models.model.default"
            },
            "_f_dist": {
              "$type": "builtins.function"
            },
            "model": {
              "_name": "GaussianMLPModel",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
              "_cached_params": "None",
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "encoder": {
                  "$type": "garage.tf.models.model.encoder"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_hidden_sizes": [
                20,
                20
              ],
              "_output_dim": 4.0,
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_layer_normalization": false,
              "_init_std_param": -2.3025850929940455,
              "_min_std_param": -13.815510557964274,
              "_max_std_param": -1.6094379124341005,
              "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
            },
            "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
          },
          "_augmented_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              7
            ],
            "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
            "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
            "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
            "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_hidden_sizes": [
            32,
            16
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095543752,
            "_random_generator": {
              "_seed": 3095543758,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 968962777,
            "_random_generator": {
              "_seed": 968962780,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 1.0,
          "_min_std": "None",
          "_max_std": 2.0,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "obs_dim": 3.0,
          "action_dim": 2.0,
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
          "_cached_params": [
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "given_task": {
              "$type": "garage.tf.models.model.given_task"
            },
            "loss_policy": {
              "$type": "garage.tf.models.model.loss_policy"
            }
          },
          "_default_parameters": "None",
          "_output_dim": 2.0,
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_init_std_param": 0.0,
          "_min_std_param": "None",
          "_max_std_param": 0.6931471805599453,
          "_f_dist_obs_latent": {
            "$type": "builtins.function"
          },
          "_f_dist_obs_task": {
            "$type": "builtins.function"
          },
          "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
        },
        {
          "_env_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "policy",
          "_encoder": {
            "_name": "embedding",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
            "_cached_params": [
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_embedding_spec": {
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.InOutSpec"
            },
            "_hidden_sizes": [
              20,
              20
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "_latent_dim": 4.0,
            "_input_dim": 4.0,
            "_network": {
              "$type": "garage.tf.models.model.default"
            },
            "_f_dist": {
              "$type": "builtins.function"
            },
            "model": {
              "_name": "GaussianMLPModel",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
              "_cached_params": "None",
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "encoder": {
                  "$type": "garage.tf.models.model.encoder"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_hidden_sizes": [
                20,
                20
              ],
              "_output_dim": 4.0,
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_layer_normalization": false,
              "_init_std_param": -2.3025850929940455,
              "_min_std_param": -13.815510557964274,
              "_max_std_param": -1.6094379124341005,
              "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
            },
            "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
          },
          "_augmented_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              7
            ],
            "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
            "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
            "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
            "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_hidden_sizes": [
            32,
            16
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095543752,
            "_random_generator": {
              "_seed": 3095543758,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 968962777,
            "_random_generator": {
              "_seed": 968962780,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 1.0,
          "_min_std": "None",
          "_max_std": 2.0,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "obs_dim": 3.0,
          "action_dim": 2.0,
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
          "_cached_params": [
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "given_task": {
              "$type": "garage.tf.models.model.given_task"
            },
            "loss_policy": {
              "$type": "garage.tf.models.model.loss_policy"
            }
          },
          "_default_parameters": "None",
          "_output_dim": 2.0,
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_init_std_param": 0.0,
          "_min_std_param": "None",
          "_max_std_param": 0.6931471805599453,
          "_f_dist_obs_latent": {
            "$type": "builtins.function"
          },
          "_f_dist_obs_task": {
            "$type": "builtins.function"
          },
          "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
        },
        {
          "_env_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "policy",
          "_encoder": {
            "_name": "embedding",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
            "_cached_params": [
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_embedding_spec": {
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.InOutSpec"
            },
            "_hidden_sizes": [
              20,
              20
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "_latent_dim": 4.0,
            "_input_dim": 4.0,
            "_network": {
              "$type": "garage.tf.models.model.default"
            },
            "_f_dist": {
              "$type": "builtins.function"
            },
            "model": {
              "_name": "GaussianMLPModel",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
              "_cached_params": "None",
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "encoder": {
                  "$type": "garage.tf.models.model.encoder"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_hidden_sizes": [
                20,
                20
              ],
              "_output_dim": 4.0,
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_layer_normalization": false,
              "_init_std_param": -2.3025850929940455,
              "_min_std_param": -13.815510557964274,
              "_max_std_param": -1.6094379124341005,
              "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
            },
            "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
          },
          "_augmented_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              7
            ],
            "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
            "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
            "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
            "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_hidden_sizes": [
            32,
            16
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095543752,
            "_random_generator": {
              "_seed": 3095543758,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 968962777,
            "_random_generator": {
              "_seed": 968962780,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 1.0,
          "_min_std": "None",
          "_max_std": 2.0,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "obs_dim": 3.0,
          "action_dim": 2.0,
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
          "_cached_params": [
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "given_task": {
              "$type": "garage.tf.models.model.given_task"
            },
            "loss_policy": {
              "$type": "garage.tf.models.model.loss_policy"
            }
          },
          "_default_parameters": "None",
          "_output_dim": 2.0,
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_init_std_param": 0.0,
          "_min_std_param": "None",
          "_max_std_param": 0.6931471805599453,
          "_f_dist_obs_latent": {
            "$type": "builtins.function"
          },
          "_f_dist_obs_task": {
            "$type": "builtins.function"
          },
          "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
        },
        {
          "_env_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "policy",
          "_encoder": {
            "_name": "embedding",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
            "_cached_params": [
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_embedding_spec": {
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.InOutSpec"
            },
            "_hidden_sizes": [
              20,
              20
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "_latent_dim": 4.0,
            "_input_dim": 4.0,
            "_network": {
              "$type": "garage.tf.models.model.default"
            },
            "_f_dist": {
              "$type": "builtins.function"
            },
            "model": {
              "_name": "GaussianMLPModel",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
              "_cached_params": "None",
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "encoder": {
                  "$type": "garage.tf.models.model.encoder"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_hidden_sizes": [
                20,
                20
              ],
              "_output_dim": 4.0,
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_layer_normalization": false,
              "_init_std_param": -2.3025850929940455,
              "_min_std_param": -13.815510557964274,
              "_max_std_param": -1.6094379124341005,
              "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
            },
            "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
          },
          "_augmented_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              7
            ],
            "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
            "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
            "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
            "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_hidden_sizes": [
            32,
            16
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095543752,
            "_random_generator": {
              "_seed": 3095543758,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 968962777,
            "_random_generator": {
              "_seed": 968962780,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 1.0,
          "_min_std": "None",
          "_max_std": 2.0,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "obs_dim": 3.0,
          "action_dim": 2.0,
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
          "_cached_params": [
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "given_task": {
              "$type": "garage.tf.models.model.given_task"
            },
            "loss_policy": {
              "$type": "garage.tf.models.model.loss_policy"
            }
          },
          "_default_parameters": "None",
          "_output_dim": 2.0,
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_init_std_param": 0.0,
          "_min_std_param": "None",
          "_max_std_param": 0.6931471805599453,
          "_f_dist_obs_latent": {
            "$type": "builtins.function"
          },
          "_f_dist_obs_task": {
            "$type": "builtins.function"
          },
          "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
        },
        {
          "_env_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "policy",
          "_encoder": {
            "_name": "embedding",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
            "_cached_params": [
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_embedding_spec": {
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.InOutSpec"
            },
            "_hidden_sizes": [
              20,
              20
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "_latent_dim": 4.0,
            "_input_dim": 4.0,
            "_network": {
              "$type": "garage.tf.models.model.default"
            },
            "_f_dist": {
              "$type": "builtins.function"
            },
            "model": {
              "_name": "GaussianMLPModel",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
              "_cached_params": "None",
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "encoder": {
                  "$type": "garage.tf.models.model.encoder"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_hidden_sizes": [
                20,
                20
              ],
              "_output_dim": 4.0,
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_layer_normalization": false,
              "_init_std_param": -2.3025850929940455,
              "_min_std_param": -13.815510557964274,
              "_max_std_param": -1.6094379124341005,
              "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
            },
            "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
          },
          "_augmented_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              7
            ],
            "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
            "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
            "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
            "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_hidden_sizes": [
            32,
            16
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095543752,
            "_random_generator": {
              "_seed": 3095543758,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 968962777,
            "_random_generator": {
              "_seed": 968962780,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 1.0,
          "_min_std": "None",
          "_max_std": 2.0,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "obs_dim": 3.0,
          "action_dim": 2.0,
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
          "_cached_params": [
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "given_task": {
              "$type": "garage.tf.models.model.given_task"
            },
            "loss_policy": {
              "$type": "garage.tf.models.model.loss_policy"
            }
          },
          "_default_parameters": "None",
          "_output_dim": 2.0,
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_init_std_param": 0.0,
          "_min_std_param": "None",
          "_max_std_param": 0.6931471805599453,
          "_f_dist_obs_latent": {
            "$type": "builtins.function"
          },
          "_f_dist_obs_task": {
            "$type": "builtins.function"
          },
          "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
        },
        {
          "_env_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "policy",
          "_encoder": {
            "_name": "embedding",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
            "_cached_params": [
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_embedding_spec": {
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.InOutSpec"
            },
            "_hidden_sizes": [
              20,
              20
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "_latent_dim": 4.0,
            "_input_dim": 4.0,
            "_network": {
              "$type": "garage.tf.models.model.default"
            },
            "_f_dist": {
              "$type": "builtins.function"
            },
            "model": {
              "_name": "GaussianMLPModel",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
              "_cached_params": "None",
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "encoder": {
                  "$type": "garage.tf.models.model.encoder"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_hidden_sizes": [
                20,
                20
              ],
              "_output_dim": 4.0,
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_layer_normalization": false,
              "_init_std_param": -2.3025850929940455,
              "_min_std_param": -13.815510557964274,
              "_max_std_param": -1.6094379124341005,
              "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
            },
            "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
          },
          "_augmented_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              7
            ],
            "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
            "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
            "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
            "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_hidden_sizes": [
            32,
            16
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095543752,
            "_random_generator": {
              "_seed": 3095543758,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 968962777,
            "_random_generator": {
              "_seed": 968962780,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 1.0,
          "_min_std": "None",
          "_max_std": 2.0,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "obs_dim": 3.0,
          "action_dim": 2.0,
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
          "_cached_params": [
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "given_task": {
              "$type": "garage.tf.models.model.given_task"
            },
            "loss_policy": {
              "$type": "garage.tf.models.model.loss_policy"
            }
          },
          "_default_parameters": "None",
          "_output_dim": 2.0,
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_init_std_param": 0.0,
          "_min_std_param": "None",
          "_max_std_param": 0.6931471805599453,
          "_f_dist_obs_latent": {
            "$type": "builtins.function"
          },
          "_f_dist_obs_task": {
            "$type": "builtins.function"
          },
          "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
        },
        {
          "_env_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "policy",
          "_encoder": {
            "_name": "embedding",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
            "_cached_params": [
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_embedding_spec": {
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  4
                ],
                "low": "array([0., 0., 0., 0.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.InOutSpec"
            },
            "_hidden_sizes": [
              20,
              20
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "_latent_dim": 4.0,
            "_input_dim": 4.0,
            "_network": {
              "$type": "garage.tf.models.model.default"
            },
            "_f_dist": {
              "$type": "builtins.function"
            },
            "model": {
              "_name": "GaussianMLPModel",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
              "_cached_params": "None",
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "encoder": {
                  "$type": "garage.tf.models.model.encoder"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_hidden_sizes": [
                20,
                20
              ],
              "_output_dim": 4.0,
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_layer_normalization": false,
              "_init_std_param": -2.3025850929940455,
              "_min_std_param": -13.815510557964274,
              "_max_std_param": -1.6094379124341005,
              "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
            },
            "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
          },
          "_augmented_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              7
            ],
            "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
            "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
            "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
            "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_hidden_sizes": [
            32,
            16
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095543752,
            "_random_generator": {
              "_seed": 3095543758,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 968962777,
            "_random_generator": {
              "_seed": 968962780,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 1.0,
          "_min_std": "None",
          "_max_std": 2.0,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "obs_dim": 3.0,
          "action_dim": 2.0,
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
          "_cached_params": [
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
            "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "given_task": {
              "$type": "garage.tf.models.model.given_task"
            },
            "loss_policy": {
              "$type": "garage.tf.models.model.loss_policy"
            }
          },
          "_default_parameters": "None",
          "_output_dim": 2.0,
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_init_std_param": 0.0,
          "_min_std_param": "None",
          "_max_std_param": 0.6931471805599453,
          "_f_dist_obs_latent": {
            "$type": "builtins.function"
          },
          "_f_dist_obs_task": {
            "$type": "builtins.function"
          },
          "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
        }
      ],
      "_envs": [
        {
          "_sample_strategy": {
            "$type": "builtins.function"
          },
          "_num_tasks": 4,
          "_active_task_index": "None",
          "_mode": "vanilla",
          "_env": {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          "_env_names": "None",
          "_task_envs": [
            {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            }
          ],
          "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
        },
        {
          "_sample_strategy": {
            "$type": "builtins.function"
          },
          "_num_tasks": 4,
          "_active_task_index": "None",
          "_mode": "vanilla",
          "_env": {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          "_env_names": "None",
          "_task_envs": [
            {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            }
          ],
          "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
        },
        {
          "_sample_strategy": {
            "$type": "builtins.function"
          },
          "_num_tasks": 4,
          "_active_task_index": "None",
          "_mode": "vanilla",
          "_env": {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          "_env_names": "None",
          "_task_envs": [
            {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            }
          ],
          "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
        },
        {
          "_sample_strategy": {
            "$type": "builtins.function"
          },
          "_num_tasks": 4,
          "_active_task_index": "None",
          "_mode": "vanilla",
          "_env": {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          "_env_names": "None",
          "_task_envs": [
            {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            }
          ],
          "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
        },
        {
          "_sample_strategy": {
            "$type": "builtins.function"
          },
          "_num_tasks": 4,
          "_active_task_index": "None",
          "_mode": "vanilla",
          "_env": {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          "_env_names": "None",
          "_task_envs": [
            {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            }
          ],
          "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
        },
        {
          "_sample_strategy": {
            "$type": "builtins.function"
          },
          "_num_tasks": 4,
          "_active_task_index": "None",
          "_mode": "vanilla",
          "_env": {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          "_env_names": "None",
          "_task_envs": [
            {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            }
          ],
          "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
        },
        {
          "_sample_strategy": {
            "$type": "builtins.function"
          },
          "_num_tasks": 4,
          "_active_task_index": "None",
          "_mode": "vanilla",
          "_env": {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          "_env_names": "None",
          "_task_envs": [
            {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            }
          ],
          "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
        },
        {
          "_sample_strategy": {
            "$type": "builtins.function"
          },
          "_num_tasks": 4,
          "_active_task_index": "None",
          "_mode": "vanilla",
          "_env": {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          "_env_names": "None",
          "_task_envs": [
            {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            }
          ],
          "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
        },
        {
          "_sample_strategy": {
            "$type": "builtins.function"
          },
          "_num_tasks": 4,
          "_active_task_index": "None",
          "_mode": "vanilla",
          "_env": {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          "_env_names": "None",
          "_task_envs": [
            {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            }
          ],
          "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
        },
        {
          "_sample_strategy": {
            "$type": "builtins.function"
          },
          "_num_tasks": 4,
          "_active_task_index": "None",
          "_mode": "vanilla",
          "_env": {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          "_env_names": "None",
          "_task_envs": [
            {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            {
              "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            }
          ],
          "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
        }
      ],
      "_workers": [
        {
          "_inner_worker": {
            "_latents": [],
            "_tasks": [],
            "_latent_infos": {},
            "_z": "None",
            "_t": "None",
            "_latent_info": "None",
            "_seed": "None",
            "_max_episode_length": 100,
            "_worker_number": 0,
            "agent": {
              "_env_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_name": "policy",
              "_encoder": {
                "_name": "embedding",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
                "_cached_params": [
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
                ],
                "_cached_param_shapes": "None",
                "_embedding_spec": {
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.InOutSpec"
                },
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_layer_normalization": false,
                "_latent_dim": 4.0,
                "_input_dim": 4.0,
                "_network": {
                  "$type": "garage.tf.models.model.default"
                },
                "_f_dist": {
                  "$type": "builtins.function"
                },
                "model": {
                  "_name": "GaussianMLPModel",
                  "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                  "_cached_params": "None",
                  "_cached_param_shapes": "None",
                  "_networks": {
                    "default": {
                      "$type": "garage.tf.models.model.default"
                    },
                    "encoder": {
                      "$type": "garage.tf.models.model.encoder"
                    },
                    "loss_policy": {
                      "$type": "garage.tf.models.model.loss_policy"
                    }
                  },
                  "_default_parameters": "None",
                  "_hidden_sizes": [
                    20,
                    20
                  ],
                  "_output_dim": 4.0,
                  "_learn_std": true,
                  "_adaptive_std": false,
                  "_std_share_network": true,
                  "_std_hidden_sizes": [
                    32,
                    32
                  ],
                  "_init_std": 0.1,
                  "_min_std": 1e-06,
                  "_max_std": 0.2,
                  "_std_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3546074414,
                    "_random_generator": {
                      "_seed": 3546074414,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                  "_std_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3967489603,
                    "_random_generator": {
                      "_seed": 3967489603,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_parameterization": "exp",
                  "_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 1407969796,
                    "_random_generator": {
                      "_seed": 1407969806,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                  "_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3095295623,
                    "_random_generator": {
                      "_seed": 3095295628,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                  "_layer_normalization": false,
                  "_init_std_param": -2.3025850929940455,
                  "_min_std_param": -13.815510557964274,
                  "_max_std_param": -1.6094379124341005,
                  "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
                },
                "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
              },
              "_augmented_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  7
                ],
                "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
                "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
                "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
                "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_hidden_sizes": [
                32,
                16
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095543752,
                "_random_generator": {
                  "_seed": 3095543758,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 968962777,
                "_random_generator": {
                  "_seed": 968962780,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 1.0,
              "_min_std": "None",
              "_max_std": 2.0,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "obs_dim": 3.0,
              "action_dim": 2.0,
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
              "_cached_params": [
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "given_task": {
                  "$type": "garage.tf.models.model.given_task"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_output_dim": 2.0,
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_init_std_param": 0.0,
              "_min_std_param": "None",
              "_max_std_param": 0.6931471805599453,
              "_f_dist_obs_latent": {
                "$type": "builtins.function"
              },
              "_f_dist_obs_task": {
                "$type": "builtins.function"
              },
              "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
            },
            "env": {
              "_sample_strategy": {
                "$type": "builtins.function"
              },
              "_num_tasks": 4,
              "_active_task_index": "None",
              "_mode": "vanilla",
              "_env": {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              "_env_names": "None",
              "_task_envs": [
                {
                  "_goal": "array([0., 3.], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([0., 3.], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                }
              ],
              "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
            },
            "_env_steps": [],
            "_observations": [],
            "_last_observations": [],
            "_agent_infos": {},
            "_lengths": [],
            "_prev_obs": "None",
            "_eps_length": 0,
            "_episode_infos": {},
            "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
          },
          "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
          "_sess_entered": "None",
          "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
        },
        {
          "_inner_worker": {
            "_latents": [],
            "_tasks": [],
            "_latent_infos": {},
            "_z": "None",
            "_t": "None",
            "_latent_info": "None",
            "_seed": "None",
            "_max_episode_length": 100,
            "_worker_number": 1,
            "agent": {
              "_env_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_name": "policy",
              "_encoder": {
                "_name": "embedding",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
                "_cached_params": [
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
                ],
                "_cached_param_shapes": "None",
                "_embedding_spec": {
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.InOutSpec"
                },
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_layer_normalization": false,
                "_latent_dim": 4.0,
                "_input_dim": 4.0,
                "_network": {
                  "$type": "garage.tf.models.model.default"
                },
                "_f_dist": {
                  "$type": "builtins.function"
                },
                "model": {
                  "_name": "GaussianMLPModel",
                  "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                  "_cached_params": "None",
                  "_cached_param_shapes": "None",
                  "_networks": {
                    "default": {
                      "$type": "garage.tf.models.model.default"
                    },
                    "encoder": {
                      "$type": "garage.tf.models.model.encoder"
                    },
                    "loss_policy": {
                      "$type": "garage.tf.models.model.loss_policy"
                    }
                  },
                  "_default_parameters": "None",
                  "_hidden_sizes": [
                    20,
                    20
                  ],
                  "_output_dim": 4.0,
                  "_learn_std": true,
                  "_adaptive_std": false,
                  "_std_share_network": true,
                  "_std_hidden_sizes": [
                    32,
                    32
                  ],
                  "_init_std": 0.1,
                  "_min_std": 1e-06,
                  "_max_std": 0.2,
                  "_std_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3546074414,
                    "_random_generator": {
                      "_seed": 3546074414,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                  "_std_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3967489603,
                    "_random_generator": {
                      "_seed": 3967489603,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_parameterization": "exp",
                  "_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 1407969796,
                    "_random_generator": {
                      "_seed": 1407969806,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                  "_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3095295623,
                    "_random_generator": {
                      "_seed": 3095295628,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                  "_layer_normalization": false,
                  "_init_std_param": -2.3025850929940455,
                  "_min_std_param": -13.815510557964274,
                  "_max_std_param": -1.6094379124341005,
                  "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
                },
                "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
              },
              "_augmented_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  7
                ],
                "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
                "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
                "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
                "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_hidden_sizes": [
                32,
                16
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095543752,
                "_random_generator": {
                  "_seed": 3095543758,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 968962777,
                "_random_generator": {
                  "_seed": 968962780,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 1.0,
              "_min_std": "None",
              "_max_std": 2.0,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "obs_dim": 3.0,
              "action_dim": 2.0,
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
              "_cached_params": [
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "given_task": {
                  "$type": "garage.tf.models.model.given_task"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_output_dim": 2.0,
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_init_std_param": 0.0,
              "_min_std_param": "None",
              "_max_std_param": 0.6931471805599453,
              "_f_dist_obs_latent": {
                "$type": "builtins.function"
              },
              "_f_dist_obs_task": {
                "$type": "builtins.function"
              },
              "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
            },
            "env": {
              "_sample_strategy": {
                "$type": "builtins.function"
              },
              "_num_tasks": 4,
              "_active_task_index": "None",
              "_mode": "vanilla",
              "_env": {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              "_env_names": "None",
              "_task_envs": [
                {
                  "_goal": "array([0., 3.], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([0., 3.], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                }
              ],
              "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
            },
            "_env_steps": [],
            "_observations": [],
            "_last_observations": [],
            "_agent_infos": {},
            "_lengths": [],
            "_prev_obs": "None",
            "_eps_length": 0,
            "_episode_infos": {},
            "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
          },
          "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
          "_sess_entered": "None",
          "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
        },
        {
          "_inner_worker": {
            "_latents": [],
            "_tasks": [],
            "_latent_infos": {},
            "_z": "None",
            "_t": "None",
            "_latent_info": "None",
            "_seed": "None",
            "_max_episode_length": 100,
            "_worker_number": 2,
            "agent": {
              "_env_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_name": "policy",
              "_encoder": {
                "_name": "embedding",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
                "_cached_params": [
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
                ],
                "_cached_param_shapes": "None",
                "_embedding_spec": {
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.InOutSpec"
                },
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_layer_normalization": false,
                "_latent_dim": 4.0,
                "_input_dim": 4.0,
                "_network": {
                  "$type": "garage.tf.models.model.default"
                },
                "_f_dist": {
                  "$type": "builtins.function"
                },
                "model": {
                  "_name": "GaussianMLPModel",
                  "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                  "_cached_params": "None",
                  "_cached_param_shapes": "None",
                  "_networks": {
                    "default": {
                      "$type": "garage.tf.models.model.default"
                    },
                    "encoder": {
                      "$type": "garage.tf.models.model.encoder"
                    },
                    "loss_policy": {
                      "$type": "garage.tf.models.model.loss_policy"
                    }
                  },
                  "_default_parameters": "None",
                  "_hidden_sizes": [
                    20,
                    20
                  ],
                  "_output_dim": 4.0,
                  "_learn_std": true,
                  "_adaptive_std": false,
                  "_std_share_network": true,
                  "_std_hidden_sizes": [
                    32,
                    32
                  ],
                  "_init_std": 0.1,
                  "_min_std": 1e-06,
                  "_max_std": 0.2,
                  "_std_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3546074414,
                    "_random_generator": {
                      "_seed": 3546074414,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                  "_std_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3967489603,
                    "_random_generator": {
                      "_seed": 3967489603,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_parameterization": "exp",
                  "_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 1407969796,
                    "_random_generator": {
                      "_seed": 1407969806,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                  "_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3095295623,
                    "_random_generator": {
                      "_seed": 3095295628,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                  "_layer_normalization": false,
                  "_init_std_param": -2.3025850929940455,
                  "_min_std_param": -13.815510557964274,
                  "_max_std_param": -1.6094379124341005,
                  "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
                },
                "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
              },
              "_augmented_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  7
                ],
                "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
                "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
                "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
                "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_hidden_sizes": [
                32,
                16
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095543752,
                "_random_generator": {
                  "_seed": 3095543758,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 968962777,
                "_random_generator": {
                  "_seed": 968962780,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 1.0,
              "_min_std": "None",
              "_max_std": 2.0,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "obs_dim": 3.0,
              "action_dim": 2.0,
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
              "_cached_params": [
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "given_task": {
                  "$type": "garage.tf.models.model.given_task"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_output_dim": 2.0,
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_init_std_param": 0.0,
              "_min_std_param": "None",
              "_max_std_param": 0.6931471805599453,
              "_f_dist_obs_latent": {
                "$type": "builtins.function"
              },
              "_f_dist_obs_task": {
                "$type": "builtins.function"
              },
              "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
            },
            "env": {
              "_sample_strategy": {
                "$type": "builtins.function"
              },
              "_num_tasks": 4,
              "_active_task_index": "None",
              "_mode": "vanilla",
              "_env": {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              "_env_names": "None",
              "_task_envs": [
                {
                  "_goal": "array([0., 3.], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([0., 3.], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                }
              ],
              "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
            },
            "_env_steps": [],
            "_observations": [],
            "_last_observations": [],
            "_agent_infos": {},
            "_lengths": [],
            "_prev_obs": "None",
            "_eps_length": 0,
            "_episode_infos": {},
            "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
          },
          "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
          "_sess_entered": "None",
          "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
        },
        {
          "_inner_worker": {
            "_latents": [],
            "_tasks": [],
            "_latent_infos": {},
            "_z": "None",
            "_t": "None",
            "_latent_info": "None",
            "_seed": "None",
            "_max_episode_length": 100,
            "_worker_number": 3,
            "agent": {
              "_env_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_name": "policy",
              "_encoder": {
                "_name": "embedding",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
                "_cached_params": [
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
                ],
                "_cached_param_shapes": "None",
                "_embedding_spec": {
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.InOutSpec"
                },
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_layer_normalization": false,
                "_latent_dim": 4.0,
                "_input_dim": 4.0,
                "_network": {
                  "$type": "garage.tf.models.model.default"
                },
                "_f_dist": {
                  "$type": "builtins.function"
                },
                "model": {
                  "_name": "GaussianMLPModel",
                  "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                  "_cached_params": "None",
                  "_cached_param_shapes": "None",
                  "_networks": {
                    "default": {
                      "$type": "garage.tf.models.model.default"
                    },
                    "encoder": {
                      "$type": "garage.tf.models.model.encoder"
                    },
                    "loss_policy": {
                      "$type": "garage.tf.models.model.loss_policy"
                    }
                  },
                  "_default_parameters": "None",
                  "_hidden_sizes": [
                    20,
                    20
                  ],
                  "_output_dim": 4.0,
                  "_learn_std": true,
                  "_adaptive_std": false,
                  "_std_share_network": true,
                  "_std_hidden_sizes": [
                    32,
                    32
                  ],
                  "_init_std": 0.1,
                  "_min_std": 1e-06,
                  "_max_std": 0.2,
                  "_std_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3546074414,
                    "_random_generator": {
                      "_seed": 3546074414,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                  "_std_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3967489603,
                    "_random_generator": {
                      "_seed": 3967489603,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_parameterization": "exp",
                  "_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 1407969796,
                    "_random_generator": {
                      "_seed": 1407969806,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                  "_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3095295623,
                    "_random_generator": {
                      "_seed": 3095295628,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                  "_layer_normalization": false,
                  "_init_std_param": -2.3025850929940455,
                  "_min_std_param": -13.815510557964274,
                  "_max_std_param": -1.6094379124341005,
                  "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
                },
                "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
              },
              "_augmented_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  7
                ],
                "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
                "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
                "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
                "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_hidden_sizes": [
                32,
                16
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095543752,
                "_random_generator": {
                  "_seed": 3095543758,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 968962777,
                "_random_generator": {
                  "_seed": 968962780,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 1.0,
              "_min_std": "None",
              "_max_std": 2.0,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "obs_dim": 3.0,
              "action_dim": 2.0,
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
              "_cached_params": [
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "given_task": {
                  "$type": "garage.tf.models.model.given_task"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_output_dim": 2.0,
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_init_std_param": 0.0,
              "_min_std_param": "None",
              "_max_std_param": 0.6931471805599453,
              "_f_dist_obs_latent": {
                "$type": "builtins.function"
              },
              "_f_dist_obs_task": {
                "$type": "builtins.function"
              },
              "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
            },
            "env": {
              "_sample_strategy": {
                "$type": "builtins.function"
              },
              "_num_tasks": 4,
              "_active_task_index": "None",
              "_mode": "vanilla",
              "_env": {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              "_env_names": "None",
              "_task_envs": [
                {
                  "_goal": "array([0., 3.], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([0., 3.], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                }
              ],
              "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
            },
            "_env_steps": [],
            "_observations": [],
            "_last_observations": [],
            "_agent_infos": {},
            "_lengths": [],
            "_prev_obs": "None",
            "_eps_length": 0,
            "_episode_infos": {},
            "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
          },
          "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
          "_sess_entered": "None",
          "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
        },
        {
          "_inner_worker": {
            "_latents": [],
            "_tasks": [],
            "_latent_infos": {},
            "_z": "None",
            "_t": "None",
            "_latent_info": "None",
            "_seed": "None",
            "_max_episode_length": 100,
            "_worker_number": 4,
            "agent": {
              "_env_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_name": "policy",
              "_encoder": {
                "_name": "embedding",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
                "_cached_params": [
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
                ],
                "_cached_param_shapes": "None",
                "_embedding_spec": {
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.InOutSpec"
                },
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_layer_normalization": false,
                "_latent_dim": 4.0,
                "_input_dim": 4.0,
                "_network": {
                  "$type": "garage.tf.models.model.default"
                },
                "_f_dist": {
                  "$type": "builtins.function"
                },
                "model": {
                  "_name": "GaussianMLPModel",
                  "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                  "_cached_params": "None",
                  "_cached_param_shapes": "None",
                  "_networks": {
                    "default": {
                      "$type": "garage.tf.models.model.default"
                    },
                    "encoder": {
                      "$type": "garage.tf.models.model.encoder"
                    },
                    "loss_policy": {
                      "$type": "garage.tf.models.model.loss_policy"
                    }
                  },
                  "_default_parameters": "None",
                  "_hidden_sizes": [
                    20,
                    20
                  ],
                  "_output_dim": 4.0,
                  "_learn_std": true,
                  "_adaptive_std": false,
                  "_std_share_network": true,
                  "_std_hidden_sizes": [
                    32,
                    32
                  ],
                  "_init_std": 0.1,
                  "_min_std": 1e-06,
                  "_max_std": 0.2,
                  "_std_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3546074414,
                    "_random_generator": {
                      "_seed": 3546074414,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                  "_std_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3967489603,
                    "_random_generator": {
                      "_seed": 3967489603,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_parameterization": "exp",
                  "_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 1407969796,
                    "_random_generator": {
                      "_seed": 1407969806,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                  "_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3095295623,
                    "_random_generator": {
                      "_seed": 3095295628,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                  "_layer_normalization": false,
                  "_init_std_param": -2.3025850929940455,
                  "_min_std_param": -13.815510557964274,
                  "_max_std_param": -1.6094379124341005,
                  "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
                },
                "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
              },
              "_augmented_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  7
                ],
                "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
                "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
                "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
                "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_hidden_sizes": [
                32,
                16
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095543752,
                "_random_generator": {
                  "_seed": 3095543758,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 968962777,
                "_random_generator": {
                  "_seed": 968962780,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 1.0,
              "_min_std": "None",
              "_max_std": 2.0,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "obs_dim": 3.0,
              "action_dim": 2.0,
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
              "_cached_params": [
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "given_task": {
                  "$type": "garage.tf.models.model.given_task"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_output_dim": 2.0,
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_init_std_param": 0.0,
              "_min_std_param": "None",
              "_max_std_param": 0.6931471805599453,
              "_f_dist_obs_latent": {
                "$type": "builtins.function"
              },
              "_f_dist_obs_task": {
                "$type": "builtins.function"
              },
              "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
            },
            "env": {
              "_sample_strategy": {
                "$type": "builtins.function"
              },
              "_num_tasks": 4,
              "_active_task_index": "None",
              "_mode": "vanilla",
              "_env": {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              "_env_names": "None",
              "_task_envs": [
                {
                  "_goal": "array([0., 3.], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([0., 3.], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                }
              ],
              "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
            },
            "_env_steps": [],
            "_observations": [],
            "_last_observations": [],
            "_agent_infos": {},
            "_lengths": [],
            "_prev_obs": "None",
            "_eps_length": 0,
            "_episode_infos": {},
            "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
          },
          "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
          "_sess_entered": "None",
          "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
        },
        {
          "_inner_worker": {
            "_latents": [],
            "_tasks": [],
            "_latent_infos": {},
            "_z": "None",
            "_t": "None",
            "_latent_info": "None",
            "_seed": "None",
            "_max_episode_length": 100,
            "_worker_number": 5,
            "agent": {
              "_env_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_name": "policy",
              "_encoder": {
                "_name": "embedding",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
                "_cached_params": [
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
                ],
                "_cached_param_shapes": "None",
                "_embedding_spec": {
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.InOutSpec"
                },
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_layer_normalization": false,
                "_latent_dim": 4.0,
                "_input_dim": 4.0,
                "_network": {
                  "$type": "garage.tf.models.model.default"
                },
                "_f_dist": {
                  "$type": "builtins.function"
                },
                "model": {
                  "_name": "GaussianMLPModel",
                  "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                  "_cached_params": "None",
                  "_cached_param_shapes": "None",
                  "_networks": {
                    "default": {
                      "$type": "garage.tf.models.model.default"
                    },
                    "encoder": {
                      "$type": "garage.tf.models.model.encoder"
                    },
                    "loss_policy": {
                      "$type": "garage.tf.models.model.loss_policy"
                    }
                  },
                  "_default_parameters": "None",
                  "_hidden_sizes": [
                    20,
                    20
                  ],
                  "_output_dim": 4.0,
                  "_learn_std": true,
                  "_adaptive_std": false,
                  "_std_share_network": true,
                  "_std_hidden_sizes": [
                    32,
                    32
                  ],
                  "_init_std": 0.1,
                  "_min_std": 1e-06,
                  "_max_std": 0.2,
                  "_std_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3546074414,
                    "_random_generator": {
                      "_seed": 3546074414,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                  "_std_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3967489603,
                    "_random_generator": {
                      "_seed": 3967489603,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_parameterization": "exp",
                  "_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 1407969796,
                    "_random_generator": {
                      "_seed": 1407969806,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                  "_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3095295623,
                    "_random_generator": {
                      "_seed": 3095295628,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                  "_layer_normalization": false,
                  "_init_std_param": -2.3025850929940455,
                  "_min_std_param": -13.815510557964274,
                  "_max_std_param": -1.6094379124341005,
                  "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
                },
                "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
              },
              "_augmented_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  7
                ],
                "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
                "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
                "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
                "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_hidden_sizes": [
                32,
                16
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095543752,
                "_random_generator": {
                  "_seed": 3095543758,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 968962777,
                "_random_generator": {
                  "_seed": 968962780,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 1.0,
              "_min_std": "None",
              "_max_std": 2.0,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "obs_dim": 3.0,
              "action_dim": 2.0,
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
              "_cached_params": [
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "given_task": {
                  "$type": "garage.tf.models.model.given_task"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_output_dim": 2.0,
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_init_std_param": 0.0,
              "_min_std_param": "None",
              "_max_std_param": 0.6931471805599453,
              "_f_dist_obs_latent": {
                "$type": "builtins.function"
              },
              "_f_dist_obs_task": {
                "$type": "builtins.function"
              },
              "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
            },
            "env": {
              "_sample_strategy": {
                "$type": "builtins.function"
              },
              "_num_tasks": 4,
              "_active_task_index": "None",
              "_mode": "vanilla",
              "_env": {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              "_env_names": "None",
              "_task_envs": [
                {
                  "_goal": "array([0., 3.], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([0., 3.], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                }
              ],
              "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
            },
            "_env_steps": [],
            "_observations": [],
            "_last_observations": [],
            "_agent_infos": {},
            "_lengths": [],
            "_prev_obs": "None",
            "_eps_length": 0,
            "_episode_infos": {},
            "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
          },
          "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
          "_sess_entered": "None",
          "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
        },
        {
          "_inner_worker": {
            "_latents": [],
            "_tasks": [],
            "_latent_infos": {},
            "_z": "None",
            "_t": "None",
            "_latent_info": "None",
            "_seed": "None",
            "_max_episode_length": 100,
            "_worker_number": 6,
            "agent": {
              "_env_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_name": "policy",
              "_encoder": {
                "_name": "embedding",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
                "_cached_params": [
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
                ],
                "_cached_param_shapes": "None",
                "_embedding_spec": {
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.InOutSpec"
                },
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_layer_normalization": false,
                "_latent_dim": 4.0,
                "_input_dim": 4.0,
                "_network": {
                  "$type": "garage.tf.models.model.default"
                },
                "_f_dist": {
                  "$type": "builtins.function"
                },
                "model": {
                  "_name": "GaussianMLPModel",
                  "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                  "_cached_params": "None",
                  "_cached_param_shapes": "None",
                  "_networks": {
                    "default": {
                      "$type": "garage.tf.models.model.default"
                    },
                    "encoder": {
                      "$type": "garage.tf.models.model.encoder"
                    },
                    "loss_policy": {
                      "$type": "garage.tf.models.model.loss_policy"
                    }
                  },
                  "_default_parameters": "None",
                  "_hidden_sizes": [
                    20,
                    20
                  ],
                  "_output_dim": 4.0,
                  "_learn_std": true,
                  "_adaptive_std": false,
                  "_std_share_network": true,
                  "_std_hidden_sizes": [
                    32,
                    32
                  ],
                  "_init_std": 0.1,
                  "_min_std": 1e-06,
                  "_max_std": 0.2,
                  "_std_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3546074414,
                    "_random_generator": {
                      "_seed": 3546074414,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                  "_std_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3967489603,
                    "_random_generator": {
                      "_seed": 3967489603,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_parameterization": "exp",
                  "_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 1407969796,
                    "_random_generator": {
                      "_seed": 1407969806,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                  "_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3095295623,
                    "_random_generator": {
                      "_seed": 3095295628,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                  "_layer_normalization": false,
                  "_init_std_param": -2.3025850929940455,
                  "_min_std_param": -13.815510557964274,
                  "_max_std_param": -1.6094379124341005,
                  "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
                },
                "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
              },
              "_augmented_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  7
                ],
                "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
                "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
                "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
                "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_hidden_sizes": [
                32,
                16
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095543752,
                "_random_generator": {
                  "_seed": 3095543758,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 968962777,
                "_random_generator": {
                  "_seed": 968962780,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 1.0,
              "_min_std": "None",
              "_max_std": 2.0,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "obs_dim": 3.0,
              "action_dim": 2.0,
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
              "_cached_params": [
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "given_task": {
                  "$type": "garage.tf.models.model.given_task"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_output_dim": 2.0,
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_init_std_param": 0.0,
              "_min_std_param": "None",
              "_max_std_param": 0.6931471805599453,
              "_f_dist_obs_latent": {
                "$type": "builtins.function"
              },
              "_f_dist_obs_task": {
                "$type": "builtins.function"
              },
              "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
            },
            "env": {
              "_sample_strategy": {
                "$type": "builtins.function"
              },
              "_num_tasks": 4,
              "_active_task_index": "None",
              "_mode": "vanilla",
              "_env": {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              "_env_names": "None",
              "_task_envs": [
                {
                  "_goal": "array([0., 3.], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([0., 3.], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                }
              ],
              "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
            },
            "_env_steps": [],
            "_observations": [],
            "_last_observations": [],
            "_agent_infos": {},
            "_lengths": [],
            "_prev_obs": "None",
            "_eps_length": 0,
            "_episode_infos": {},
            "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
          },
          "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
          "_sess_entered": "None",
          "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
        },
        {
          "_inner_worker": {
            "_latents": [],
            "_tasks": [],
            "_latent_infos": {},
            "_z": "None",
            "_t": "None",
            "_latent_info": "None",
            "_seed": "None",
            "_max_episode_length": 100,
            "_worker_number": 7,
            "agent": {
              "_env_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_name": "policy",
              "_encoder": {
                "_name": "embedding",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
                "_cached_params": [
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
                ],
                "_cached_param_shapes": "None",
                "_embedding_spec": {
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.InOutSpec"
                },
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_layer_normalization": false,
                "_latent_dim": 4.0,
                "_input_dim": 4.0,
                "_network": {
                  "$type": "garage.tf.models.model.default"
                },
                "_f_dist": {
                  "$type": "builtins.function"
                },
                "model": {
                  "_name": "GaussianMLPModel",
                  "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                  "_cached_params": "None",
                  "_cached_param_shapes": "None",
                  "_networks": {
                    "default": {
                      "$type": "garage.tf.models.model.default"
                    },
                    "encoder": {
                      "$type": "garage.tf.models.model.encoder"
                    },
                    "loss_policy": {
                      "$type": "garage.tf.models.model.loss_policy"
                    }
                  },
                  "_default_parameters": "None",
                  "_hidden_sizes": [
                    20,
                    20
                  ],
                  "_output_dim": 4.0,
                  "_learn_std": true,
                  "_adaptive_std": false,
                  "_std_share_network": true,
                  "_std_hidden_sizes": [
                    32,
                    32
                  ],
                  "_init_std": 0.1,
                  "_min_std": 1e-06,
                  "_max_std": 0.2,
                  "_std_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3546074414,
                    "_random_generator": {
                      "_seed": 3546074414,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                  "_std_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3967489603,
                    "_random_generator": {
                      "_seed": 3967489603,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_parameterization": "exp",
                  "_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 1407969796,
                    "_random_generator": {
                      "_seed": 1407969806,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                  "_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3095295623,
                    "_random_generator": {
                      "_seed": 3095295628,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                  "_layer_normalization": false,
                  "_init_std_param": -2.3025850929940455,
                  "_min_std_param": -13.815510557964274,
                  "_max_std_param": -1.6094379124341005,
                  "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
                },
                "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
              },
              "_augmented_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  7
                ],
                "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
                "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
                "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
                "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_hidden_sizes": [
                32,
                16
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095543752,
                "_random_generator": {
                  "_seed": 3095543758,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 968962777,
                "_random_generator": {
                  "_seed": 968962780,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 1.0,
              "_min_std": "None",
              "_max_std": 2.0,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "obs_dim": 3.0,
              "action_dim": 2.0,
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
              "_cached_params": [
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "given_task": {
                  "$type": "garage.tf.models.model.given_task"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_output_dim": 2.0,
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_init_std_param": 0.0,
              "_min_std_param": "None",
              "_max_std_param": 0.6931471805599453,
              "_f_dist_obs_latent": {
                "$type": "builtins.function"
              },
              "_f_dist_obs_task": {
                "$type": "builtins.function"
              },
              "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
            },
            "env": {
              "_sample_strategy": {
                "$type": "builtins.function"
              },
              "_num_tasks": 4,
              "_active_task_index": "None",
              "_mode": "vanilla",
              "_env": {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              "_env_names": "None",
              "_task_envs": [
                {
                  "_goal": "array([0., 3.], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([0., 3.], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                }
              ],
              "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
            },
            "_env_steps": [],
            "_observations": [],
            "_last_observations": [],
            "_agent_infos": {},
            "_lengths": [],
            "_prev_obs": "None",
            "_eps_length": 0,
            "_episode_infos": {},
            "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
          },
          "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
          "_sess_entered": "None",
          "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
        },
        {
          "_inner_worker": {
            "_latents": [],
            "_tasks": [],
            "_latent_infos": {},
            "_z": "None",
            "_t": "None",
            "_latent_info": "None",
            "_seed": "None",
            "_max_episode_length": 100,
            "_worker_number": 8,
            "agent": {
              "_env_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_name": "policy",
              "_encoder": {
                "_name": "embedding",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
                "_cached_params": [
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
                ],
                "_cached_param_shapes": "None",
                "_embedding_spec": {
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.InOutSpec"
                },
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_layer_normalization": false,
                "_latent_dim": 4.0,
                "_input_dim": 4.0,
                "_network": {
                  "$type": "garage.tf.models.model.default"
                },
                "_f_dist": {
                  "$type": "builtins.function"
                },
                "model": {
                  "_name": "GaussianMLPModel",
                  "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                  "_cached_params": "None",
                  "_cached_param_shapes": "None",
                  "_networks": {
                    "default": {
                      "$type": "garage.tf.models.model.default"
                    },
                    "encoder": {
                      "$type": "garage.tf.models.model.encoder"
                    },
                    "loss_policy": {
                      "$type": "garage.tf.models.model.loss_policy"
                    }
                  },
                  "_default_parameters": "None",
                  "_hidden_sizes": [
                    20,
                    20
                  ],
                  "_output_dim": 4.0,
                  "_learn_std": true,
                  "_adaptive_std": false,
                  "_std_share_network": true,
                  "_std_hidden_sizes": [
                    32,
                    32
                  ],
                  "_init_std": 0.1,
                  "_min_std": 1e-06,
                  "_max_std": 0.2,
                  "_std_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3546074414,
                    "_random_generator": {
                      "_seed": 3546074414,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                  "_std_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3967489603,
                    "_random_generator": {
                      "_seed": 3967489603,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_parameterization": "exp",
                  "_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 1407969796,
                    "_random_generator": {
                      "_seed": 1407969806,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                  "_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3095295623,
                    "_random_generator": {
                      "_seed": 3095295628,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                  "_layer_normalization": false,
                  "_init_std_param": -2.3025850929940455,
                  "_min_std_param": -13.815510557964274,
                  "_max_std_param": -1.6094379124341005,
                  "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
                },
                "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
              },
              "_augmented_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  7
                ],
                "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
                "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
                "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
                "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_hidden_sizes": [
                32,
                16
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095543752,
                "_random_generator": {
                  "_seed": 3095543758,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 968962777,
                "_random_generator": {
                  "_seed": 968962780,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 1.0,
              "_min_std": "None",
              "_max_std": 2.0,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "obs_dim": 3.0,
              "action_dim": 2.0,
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
              "_cached_params": [
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "given_task": {
                  "$type": "garage.tf.models.model.given_task"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_output_dim": 2.0,
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_init_std_param": 0.0,
              "_min_std_param": "None",
              "_max_std_param": 0.6931471805599453,
              "_f_dist_obs_latent": {
                "$type": "builtins.function"
              },
              "_f_dist_obs_task": {
                "$type": "builtins.function"
              },
              "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
            },
            "env": {
              "_sample_strategy": {
                "$type": "builtins.function"
              },
              "_num_tasks": 4,
              "_active_task_index": "None",
              "_mode": "vanilla",
              "_env": {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              "_env_names": "None",
              "_task_envs": [
                {
                  "_goal": "array([0., 3.], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([0., 3.], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                }
              ],
              "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
            },
            "_env_steps": [],
            "_observations": [],
            "_last_observations": [],
            "_agent_infos": {},
            "_lengths": [],
            "_prev_obs": "None",
            "_eps_length": 0,
            "_episode_infos": {},
            "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
          },
          "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
          "_sess_entered": "None",
          "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
        },
        {
          "_inner_worker": {
            "_latents": [],
            "_tasks": [],
            "_latent_infos": {},
            "_z": "None",
            "_t": "None",
            "_latent_info": "None",
            "_seed": "None",
            "_max_episode_length": 100,
            "_worker_number": 9,
            "agent": {
              "_env_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_name": "policy",
              "_encoder": {
                "_name": "embedding",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
                "_cached_params": [
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                  "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
                ],
                "_cached_param_shapes": "None",
                "_embedding_spec": {
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      4
                    ],
                    "low": "array([0., 0., 0., 0.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.InOutSpec"
                },
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_layer_normalization": false,
                "_latent_dim": 4.0,
                "_input_dim": 4.0,
                "_network": {
                  "$type": "garage.tf.models.model.default"
                },
                "_f_dist": {
                  "$type": "builtins.function"
                },
                "model": {
                  "_name": "GaussianMLPModel",
                  "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                  "_cached_params": "None",
                  "_cached_param_shapes": "None",
                  "_networks": {
                    "default": {
                      "$type": "garage.tf.models.model.default"
                    },
                    "encoder": {
                      "$type": "garage.tf.models.model.encoder"
                    },
                    "loss_policy": {
                      "$type": "garage.tf.models.model.loss_policy"
                    }
                  },
                  "_default_parameters": "None",
                  "_hidden_sizes": [
                    20,
                    20
                  ],
                  "_output_dim": 4.0,
                  "_learn_std": true,
                  "_adaptive_std": false,
                  "_std_share_network": true,
                  "_std_hidden_sizes": [
                    32,
                    32
                  ],
                  "_init_std": 0.1,
                  "_min_std": 1e-06,
                  "_max_std": 0.2,
                  "_std_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3546074414,
                    "_random_generator": {
                      "_seed": 3546074414,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                  "_std_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_std_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3967489603,
                    "_random_generator": {
                      "_seed": 3967489603,
                      "_force_generator": false,
                      "_built": false,
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_std_parameterization": "exp",
                  "_hidden_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_hidden_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 1407969796,
                    "_random_generator": {
                      "_seed": 1407969806,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                  "_output_nonlinearity": {
                    "_tf_api_names": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_api_names_v1": [
                      "math.tanh",
                      "nn.tanh",
                      "tanh"
                    ],
                    "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                    "_tf_fallback_dispatchers": [
                      "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                    ],
                    "$type": "builtins.function"
                  },
                  "_output_w_init": {
                    "scale": 1.0,
                    "mode": "fan_avg",
                    "distribution": "uniform",
                    "seed": 3095295623,
                    "_random_generator": {
                      "_seed": 3095295628,
                      "_force_generator": false,
                      "_built": true,
                      "_generator": "None",
                      "$type": "keras.backend.RandomGenerator"
                    },
                    "$type": "keras.initializers.initializers_v2.GlorotUniform"
                  },
                  "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                  "_layer_normalization": false,
                  "_init_std_param": -2.3025850929940455,
                  "_min_std_param": -13.815510557964274,
                  "_max_std_param": -1.6094379124341005,
                  "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
                },
                "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
              },
              "_augmented_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  7
                ],
                "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
                "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
                "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
                "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_hidden_sizes": [
                32,
                16
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095543752,
                "_random_generator": {
                  "_seed": 3095543758,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 968962777,
                "_random_generator": {
                  "_seed": 968962780,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 1.0,
              "_min_std": "None",
              "_max_std": 2.0,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "obs_dim": 3.0,
              "action_dim": 2.0,
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
              "_cached_params": [
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
                "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_networks": {
                "default": {
                  "$type": "garage.tf.models.model.default"
                },
                "given_task": {
                  "$type": "garage.tf.models.model.given_task"
                },
                "loss_policy": {
                  "$type": "garage.tf.models.model.loss_policy"
                }
              },
              "_default_parameters": "None",
              "_output_dim": 2.0,
              "_std_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3546074414,
                "_random_generator": {
                  "_seed": 3546074414,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
              "_std_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3967489603,
                "_random_generator": {
                  "_seed": 3967489603,
                  "_force_generator": false,
                  "_built": false,
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_init_std_param": 0.0,
              "_min_std_param": "None",
              "_max_std_param": 0.6931471805599453,
              "_f_dist_obs_latent": {
                "$type": "builtins.function"
              },
              "_f_dist_obs_task": {
                "$type": "builtins.function"
              },
              "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
            },
            "env": {
              "_sample_strategy": {
                "$type": "builtins.function"
              },
              "_num_tasks": 4,
              "_active_task_index": "None",
              "_mode": "vanilla",
              "_env": {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              "_env_names": "None",
              "_task_envs": [
                {
                  "_goal": "array([0., 3.], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([0., 3.], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                },
                {
                  "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                  "_done_bonus": 10.0,
                  "_never_done": false,
                  "_arena_size": 5.0,
                  "_step_cnt": "None",
                  "_max_episode_length": 100,
                  "_visualize": false,
                  "_point": "array([0., 0.], dtype=float32)",
                  "_task": {
                    "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 100,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        2
                      ],
                      "low": "array([-0.1, -0.1], dtype=float32)",
                      "high": "array([0.1, 0.1], dtype=float32)",
                      "bounded_below": "array([ True,  True])",
                      "bounded_above": "array([ True,  True])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "_shape": [
                        3
                      ],
                      "low": "array([-inf, -inf, -inf], dtype=float32)",
                      "high": "array([inf, inf, inf], dtype=float32)",
                      "bounded_below": "array([False, False, False])",
                      "bounded_above": "array([False, False, False])",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "$type": "garage.envs.point_env.PointEnv"
                }
              ],
              "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
            },
            "_env_steps": [],
            "_observations": [],
            "_last_observations": [],
            "_agent_infos": {},
            "_lengths": [],
            "_prev_obs": "None",
            "_eps_length": 0,
            "_episode_infos": {},
            "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
          },
          "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
          "_sess_entered": "None",
          "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
        }
      ],
      "total_env_steps": 0,
      "$type": "garage.sampler.local_sampler.LocalSampler"
    },
    "_policy_opt_inputs": {
      "$type": "garage.tf._functions.PolicyOptInputs"
    },
    "_inference_opt_inputs": {
      "$type": "garage.tf._functions.InferenceOptInputs"
    },
    "$type": "src.algos.ate_ppo.ate_ppo.ATEPPO"
  },
  "_env": {
    "_sample_strategy": {
      "$type": "builtins.function"
    },
    "_num_tasks": 4,
    "_active_task_index": "None",
    "_mode": "vanilla",
    "_env": {
      "_goal": "array([0., 3.], dtype=float32)",
      "_done_bonus": 10.0,
      "_never_done": false,
      "_arena_size": 5.0,
      "_step_cnt": "None",
      "_max_episode_length": 100,
      "_visualize": false,
      "_point": "array([0., 0.], dtype=float32)",
      "_task": {
        "goal": "array([0., 3.], dtype=float32)"
      },
      "_observation_space": {
        "dtype": "dtype('float32')",
        "_shape": [
          3
        ],
        "low": "array([-inf, -inf, -inf], dtype=float32)",
        "high": "array([inf, inf, inf], dtype=float32)",
        "bounded_below": "array([False, False, False])",
        "bounded_above": "array([False, False, False])",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "_action_space": {
        "dtype": "dtype('float32')",
        "_shape": [
          2
        ],
        "low": "array([-0.1, -0.1], dtype=float32)",
        "high": "array([0.1, 0.1], dtype=float32)",
        "bounded_below": "array([ True,  True])",
        "bounded_above": "array([ True,  True])",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "_spec": {
        "max_episode_length": 100,
        "input_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            2
          ],
          "low": "array([-0.1, -0.1], dtype=float32)",
          "high": "array([0.1, 0.1], dtype=float32)",
          "bounded_below": "array([ True,  True])",
          "bounded_above": "array([ True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            3
          ],
          "low": "array([-inf, -inf, -inf], dtype=float32)",
          "high": "array([inf, inf, inf], dtype=float32)",
          "bounded_below": "array([False, False, False])",
          "bounded_above": "array([False, False, False])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "$type": "garage.envs.point_env.PointEnv"
    },
    "_env_names": "None",
    "_task_envs": [
      {
        "_goal": "array([0., 3.], dtype=float32)",
        "_done_bonus": 10.0,
        "_never_done": false,
        "_arena_size": 5.0,
        "_step_cnt": "None",
        "_max_episode_length": 100,
        "_visualize": false,
        "_point": "array([0., 0.], dtype=float32)",
        "_task": {
          "goal": "array([0., 3.], dtype=float32)"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            3
          ],
          "low": "array([-inf, -inf, -inf], dtype=float32)",
          "high": "array([inf, inf, inf], dtype=float32)",
          "bounded_below": "array([False, False, False])",
          "bounded_above": "array([False, False, False])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_action_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            2
          ],
          "low": "array([-0.1, -0.1], dtype=float32)",
          "high": "array([0.1, 0.1], dtype=float32)",
          "bounded_below": "array([ True,  True])",
          "bounded_above": "array([ True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.point_env.PointEnv"
      },
      {
        "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
        "_done_bonus": 10.0,
        "_never_done": false,
        "_arena_size": 5.0,
        "_step_cnt": "None",
        "_max_episode_length": 100,
        "_visualize": false,
        "_point": "array([0., 0.], dtype=float32)",
        "_task": {
          "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            3
          ],
          "low": "array([-inf, -inf, -inf], dtype=float32)",
          "high": "array([inf, inf, inf], dtype=float32)",
          "bounded_below": "array([False, False, False])",
          "bounded_above": "array([False, False, False])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_action_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            2
          ],
          "low": "array([-0.1, -0.1], dtype=float32)",
          "high": "array([0.1, 0.1], dtype=float32)",
          "bounded_below": "array([ True,  True])",
          "bounded_above": "array([ True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.point_env.PointEnv"
      },
      {
        "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
        "_done_bonus": 10.0,
        "_never_done": false,
        "_arena_size": 5.0,
        "_step_cnt": "None",
        "_max_episode_length": 100,
        "_visualize": false,
        "_point": "array([0., 0.], dtype=float32)",
        "_task": {
          "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            3
          ],
          "low": "array([-inf, -inf, -inf], dtype=float32)",
          "high": "array([inf, inf, inf], dtype=float32)",
          "bounded_below": "array([False, False, False])",
          "bounded_above": "array([False, False, False])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_action_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            2
          ],
          "low": "array([-0.1, -0.1], dtype=float32)",
          "high": "array([0.1, 0.1], dtype=float32)",
          "bounded_below": "array([ True,  True])",
          "bounded_above": "array([ True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.point_env.PointEnv"
      },
      {
        "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
        "_done_bonus": 10.0,
        "_never_done": false,
        "_arena_size": 5.0,
        "_step_cnt": "None",
        "_max_episode_length": 100,
        "_visualize": false,
        "_point": "array([0., 0.], dtype=float32)",
        "_task": {
          "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            3
          ],
          "low": "array([-inf, -inf, -inf], dtype=float32)",
          "high": "array([inf, inf, inf], dtype=float32)",
          "bounded_below": "array([False, False, False])",
          "bounded_above": "array([False, False, False])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_action_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            2
          ],
          "low": "array([-0.1, -0.1], dtype=float32)",
          "high": "array([0.1, 0.1], dtype=float32)",
          "bounded_below": "array([ True,  True])",
          "bounded_above": "array([ True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.point_env.PointEnv"
      }
    ],
    "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
  },
  "_sampler": {
    "_factory": {
      "n_workers": 10,
      "_seed": "None",
      "_max_episode_length": 100,
      "_worker_class": {
        "_wrapped_class": {
          "$typename": "garage.tf.algos.te.TaskEmbeddingWorker"
        },
        "$type": "garage.tf.samplers.worker.TFWorkerClassWrapper"
      },
      "_worker_args": {},
      "$type": "garage.sampler.worker_factory.WorkerFactory"
    },
    "_agents": [
      {
        "_env_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "policy",
        "_encoder": {
          "_name": "embedding",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
          "_cached_params": [
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_embedding_spec": {
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.InOutSpec"
          },
          "_hidden_sizes": [
            20,
            20
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "_latent_dim": 4.0,
          "_input_dim": 4.0,
          "_network": {
            "$type": "garage.tf.models.model.default"
          },
          "_f_dist": {
            "$type": "builtins.function"
          },
          "model": {
            "_name": "GaussianMLPModel",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
            "_cached_params": "None",
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "encoder": {
                "$type": "garage.tf.models.model.encoder"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_hidden_sizes": [
              20,
              20
            ],
            "_output_dim": 4.0,
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_layer_normalization": false,
            "_init_std_param": -2.3025850929940455,
            "_min_std_param": -13.815510557964274,
            "_max_std_param": -1.6094379124341005,
            "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
          },
          "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
        },
        "_augmented_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            7
          ],
          "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
          "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
          "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
          "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_hidden_sizes": [
          32,
          16
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095543752,
          "_random_generator": {
            "_seed": 3095543758,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 968962777,
          "_random_generator": {
            "_seed": 968962780,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 1.0,
        "_min_std": "None",
        "_max_std": 2.0,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "obs_dim": 3.0,
        "action_dim": 2.0,
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
        "_cached_params": [
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "given_task": {
            "$type": "garage.tf.models.model.given_task"
          },
          "loss_policy": {
            "$type": "garage.tf.models.model.loss_policy"
          }
        },
        "_default_parameters": "None",
        "_output_dim": 2.0,
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_init_std_param": 0.0,
        "_min_std_param": "None",
        "_max_std_param": 0.6931471805599453,
        "_f_dist_obs_latent": {
          "$type": "builtins.function"
        },
        "_f_dist_obs_task": {
          "$type": "builtins.function"
        },
        "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
      },
      {
        "_env_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "policy",
        "_encoder": {
          "_name": "embedding",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
          "_cached_params": [
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_embedding_spec": {
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.InOutSpec"
          },
          "_hidden_sizes": [
            20,
            20
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "_latent_dim": 4.0,
          "_input_dim": 4.0,
          "_network": {
            "$type": "garage.tf.models.model.default"
          },
          "_f_dist": {
            "$type": "builtins.function"
          },
          "model": {
            "_name": "GaussianMLPModel",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
            "_cached_params": "None",
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "encoder": {
                "$type": "garage.tf.models.model.encoder"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_hidden_sizes": [
              20,
              20
            ],
            "_output_dim": 4.0,
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_layer_normalization": false,
            "_init_std_param": -2.3025850929940455,
            "_min_std_param": -13.815510557964274,
            "_max_std_param": -1.6094379124341005,
            "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
          },
          "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
        },
        "_augmented_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            7
          ],
          "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
          "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
          "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
          "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_hidden_sizes": [
          32,
          16
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095543752,
          "_random_generator": {
            "_seed": 3095543758,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 968962777,
          "_random_generator": {
            "_seed": 968962780,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 1.0,
        "_min_std": "None",
        "_max_std": 2.0,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "obs_dim": 3.0,
        "action_dim": 2.0,
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
        "_cached_params": [
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "given_task": {
            "$type": "garage.tf.models.model.given_task"
          },
          "loss_policy": {
            "$type": "garage.tf.models.model.loss_policy"
          }
        },
        "_default_parameters": "None",
        "_output_dim": 2.0,
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_init_std_param": 0.0,
        "_min_std_param": "None",
        "_max_std_param": 0.6931471805599453,
        "_f_dist_obs_latent": {
          "$type": "builtins.function"
        },
        "_f_dist_obs_task": {
          "$type": "builtins.function"
        },
        "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
      },
      {
        "_env_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "policy",
        "_encoder": {
          "_name": "embedding",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
          "_cached_params": [
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_embedding_spec": {
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.InOutSpec"
          },
          "_hidden_sizes": [
            20,
            20
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "_latent_dim": 4.0,
          "_input_dim": 4.0,
          "_network": {
            "$type": "garage.tf.models.model.default"
          },
          "_f_dist": {
            "$type": "builtins.function"
          },
          "model": {
            "_name": "GaussianMLPModel",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
            "_cached_params": "None",
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "encoder": {
                "$type": "garage.tf.models.model.encoder"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_hidden_sizes": [
              20,
              20
            ],
            "_output_dim": 4.0,
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_layer_normalization": false,
            "_init_std_param": -2.3025850929940455,
            "_min_std_param": -13.815510557964274,
            "_max_std_param": -1.6094379124341005,
            "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
          },
          "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
        },
        "_augmented_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            7
          ],
          "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
          "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
          "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
          "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_hidden_sizes": [
          32,
          16
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095543752,
          "_random_generator": {
            "_seed": 3095543758,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 968962777,
          "_random_generator": {
            "_seed": 968962780,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 1.0,
        "_min_std": "None",
        "_max_std": 2.0,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "obs_dim": 3.0,
        "action_dim": 2.0,
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
        "_cached_params": [
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "given_task": {
            "$type": "garage.tf.models.model.given_task"
          },
          "loss_policy": {
            "$type": "garage.tf.models.model.loss_policy"
          }
        },
        "_default_parameters": "None",
        "_output_dim": 2.0,
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_init_std_param": 0.0,
        "_min_std_param": "None",
        "_max_std_param": 0.6931471805599453,
        "_f_dist_obs_latent": {
          "$type": "builtins.function"
        },
        "_f_dist_obs_task": {
          "$type": "builtins.function"
        },
        "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
      },
      {
        "_env_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "policy",
        "_encoder": {
          "_name": "embedding",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
          "_cached_params": [
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_embedding_spec": {
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.InOutSpec"
          },
          "_hidden_sizes": [
            20,
            20
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "_latent_dim": 4.0,
          "_input_dim": 4.0,
          "_network": {
            "$type": "garage.tf.models.model.default"
          },
          "_f_dist": {
            "$type": "builtins.function"
          },
          "model": {
            "_name": "GaussianMLPModel",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
            "_cached_params": "None",
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "encoder": {
                "$type": "garage.tf.models.model.encoder"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_hidden_sizes": [
              20,
              20
            ],
            "_output_dim": 4.0,
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_layer_normalization": false,
            "_init_std_param": -2.3025850929940455,
            "_min_std_param": -13.815510557964274,
            "_max_std_param": -1.6094379124341005,
            "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
          },
          "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
        },
        "_augmented_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            7
          ],
          "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
          "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
          "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
          "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_hidden_sizes": [
          32,
          16
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095543752,
          "_random_generator": {
            "_seed": 3095543758,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 968962777,
          "_random_generator": {
            "_seed": 968962780,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 1.0,
        "_min_std": "None",
        "_max_std": 2.0,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "obs_dim": 3.0,
        "action_dim": 2.0,
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
        "_cached_params": [
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "given_task": {
            "$type": "garage.tf.models.model.given_task"
          },
          "loss_policy": {
            "$type": "garage.tf.models.model.loss_policy"
          }
        },
        "_default_parameters": "None",
        "_output_dim": 2.0,
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_init_std_param": 0.0,
        "_min_std_param": "None",
        "_max_std_param": 0.6931471805599453,
        "_f_dist_obs_latent": {
          "$type": "builtins.function"
        },
        "_f_dist_obs_task": {
          "$type": "builtins.function"
        },
        "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
      },
      {
        "_env_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "policy",
        "_encoder": {
          "_name": "embedding",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
          "_cached_params": [
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_embedding_spec": {
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.InOutSpec"
          },
          "_hidden_sizes": [
            20,
            20
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "_latent_dim": 4.0,
          "_input_dim": 4.0,
          "_network": {
            "$type": "garage.tf.models.model.default"
          },
          "_f_dist": {
            "$type": "builtins.function"
          },
          "model": {
            "_name": "GaussianMLPModel",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
            "_cached_params": "None",
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "encoder": {
                "$type": "garage.tf.models.model.encoder"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_hidden_sizes": [
              20,
              20
            ],
            "_output_dim": 4.0,
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_layer_normalization": false,
            "_init_std_param": -2.3025850929940455,
            "_min_std_param": -13.815510557964274,
            "_max_std_param": -1.6094379124341005,
            "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
          },
          "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
        },
        "_augmented_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            7
          ],
          "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
          "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
          "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
          "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_hidden_sizes": [
          32,
          16
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095543752,
          "_random_generator": {
            "_seed": 3095543758,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 968962777,
          "_random_generator": {
            "_seed": 968962780,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 1.0,
        "_min_std": "None",
        "_max_std": 2.0,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "obs_dim": 3.0,
        "action_dim": 2.0,
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
        "_cached_params": [
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "given_task": {
            "$type": "garage.tf.models.model.given_task"
          },
          "loss_policy": {
            "$type": "garage.tf.models.model.loss_policy"
          }
        },
        "_default_parameters": "None",
        "_output_dim": 2.0,
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_init_std_param": 0.0,
        "_min_std_param": "None",
        "_max_std_param": 0.6931471805599453,
        "_f_dist_obs_latent": {
          "$type": "builtins.function"
        },
        "_f_dist_obs_task": {
          "$type": "builtins.function"
        },
        "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
      },
      {
        "_env_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "policy",
        "_encoder": {
          "_name": "embedding",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
          "_cached_params": [
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_embedding_spec": {
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.InOutSpec"
          },
          "_hidden_sizes": [
            20,
            20
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "_latent_dim": 4.0,
          "_input_dim": 4.0,
          "_network": {
            "$type": "garage.tf.models.model.default"
          },
          "_f_dist": {
            "$type": "builtins.function"
          },
          "model": {
            "_name": "GaussianMLPModel",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
            "_cached_params": "None",
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "encoder": {
                "$type": "garage.tf.models.model.encoder"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_hidden_sizes": [
              20,
              20
            ],
            "_output_dim": 4.0,
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_layer_normalization": false,
            "_init_std_param": -2.3025850929940455,
            "_min_std_param": -13.815510557964274,
            "_max_std_param": -1.6094379124341005,
            "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
          },
          "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
        },
        "_augmented_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            7
          ],
          "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
          "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
          "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
          "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_hidden_sizes": [
          32,
          16
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095543752,
          "_random_generator": {
            "_seed": 3095543758,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 968962777,
          "_random_generator": {
            "_seed": 968962780,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 1.0,
        "_min_std": "None",
        "_max_std": 2.0,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "obs_dim": 3.0,
        "action_dim": 2.0,
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
        "_cached_params": [
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "given_task": {
            "$type": "garage.tf.models.model.given_task"
          },
          "loss_policy": {
            "$type": "garage.tf.models.model.loss_policy"
          }
        },
        "_default_parameters": "None",
        "_output_dim": 2.0,
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_init_std_param": 0.0,
        "_min_std_param": "None",
        "_max_std_param": 0.6931471805599453,
        "_f_dist_obs_latent": {
          "$type": "builtins.function"
        },
        "_f_dist_obs_task": {
          "$type": "builtins.function"
        },
        "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
      },
      {
        "_env_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "policy",
        "_encoder": {
          "_name": "embedding",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
          "_cached_params": [
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_embedding_spec": {
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.InOutSpec"
          },
          "_hidden_sizes": [
            20,
            20
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "_latent_dim": 4.0,
          "_input_dim": 4.0,
          "_network": {
            "$type": "garage.tf.models.model.default"
          },
          "_f_dist": {
            "$type": "builtins.function"
          },
          "model": {
            "_name": "GaussianMLPModel",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
            "_cached_params": "None",
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "encoder": {
                "$type": "garage.tf.models.model.encoder"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_hidden_sizes": [
              20,
              20
            ],
            "_output_dim": 4.0,
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_layer_normalization": false,
            "_init_std_param": -2.3025850929940455,
            "_min_std_param": -13.815510557964274,
            "_max_std_param": -1.6094379124341005,
            "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
          },
          "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
        },
        "_augmented_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            7
          ],
          "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
          "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
          "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
          "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_hidden_sizes": [
          32,
          16
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095543752,
          "_random_generator": {
            "_seed": 3095543758,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 968962777,
          "_random_generator": {
            "_seed": 968962780,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 1.0,
        "_min_std": "None",
        "_max_std": 2.0,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "obs_dim": 3.0,
        "action_dim": 2.0,
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
        "_cached_params": [
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "given_task": {
            "$type": "garage.tf.models.model.given_task"
          },
          "loss_policy": {
            "$type": "garage.tf.models.model.loss_policy"
          }
        },
        "_default_parameters": "None",
        "_output_dim": 2.0,
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_init_std_param": 0.0,
        "_min_std_param": "None",
        "_max_std_param": 0.6931471805599453,
        "_f_dist_obs_latent": {
          "$type": "builtins.function"
        },
        "_f_dist_obs_task": {
          "$type": "builtins.function"
        },
        "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
      },
      {
        "_env_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "policy",
        "_encoder": {
          "_name": "embedding",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
          "_cached_params": [
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_embedding_spec": {
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.InOutSpec"
          },
          "_hidden_sizes": [
            20,
            20
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "_latent_dim": 4.0,
          "_input_dim": 4.0,
          "_network": {
            "$type": "garage.tf.models.model.default"
          },
          "_f_dist": {
            "$type": "builtins.function"
          },
          "model": {
            "_name": "GaussianMLPModel",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
            "_cached_params": "None",
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "encoder": {
                "$type": "garage.tf.models.model.encoder"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_hidden_sizes": [
              20,
              20
            ],
            "_output_dim": 4.0,
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_layer_normalization": false,
            "_init_std_param": -2.3025850929940455,
            "_min_std_param": -13.815510557964274,
            "_max_std_param": -1.6094379124341005,
            "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
          },
          "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
        },
        "_augmented_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            7
          ],
          "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
          "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
          "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
          "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_hidden_sizes": [
          32,
          16
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095543752,
          "_random_generator": {
            "_seed": 3095543758,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 968962777,
          "_random_generator": {
            "_seed": 968962780,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 1.0,
        "_min_std": "None",
        "_max_std": 2.0,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "obs_dim": 3.0,
        "action_dim": 2.0,
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
        "_cached_params": [
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "given_task": {
            "$type": "garage.tf.models.model.given_task"
          },
          "loss_policy": {
            "$type": "garage.tf.models.model.loss_policy"
          }
        },
        "_default_parameters": "None",
        "_output_dim": 2.0,
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_init_std_param": 0.0,
        "_min_std_param": "None",
        "_max_std_param": 0.6931471805599453,
        "_f_dist_obs_latent": {
          "$type": "builtins.function"
        },
        "_f_dist_obs_task": {
          "$type": "builtins.function"
        },
        "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
      },
      {
        "_env_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "policy",
        "_encoder": {
          "_name": "embedding",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
          "_cached_params": [
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_embedding_spec": {
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.InOutSpec"
          },
          "_hidden_sizes": [
            20,
            20
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "_latent_dim": 4.0,
          "_input_dim": 4.0,
          "_network": {
            "$type": "garage.tf.models.model.default"
          },
          "_f_dist": {
            "$type": "builtins.function"
          },
          "model": {
            "_name": "GaussianMLPModel",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
            "_cached_params": "None",
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "encoder": {
                "$type": "garage.tf.models.model.encoder"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_hidden_sizes": [
              20,
              20
            ],
            "_output_dim": 4.0,
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_layer_normalization": false,
            "_init_std_param": -2.3025850929940455,
            "_min_std_param": -13.815510557964274,
            "_max_std_param": -1.6094379124341005,
            "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
          },
          "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
        },
        "_augmented_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            7
          ],
          "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
          "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
          "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
          "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_hidden_sizes": [
          32,
          16
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095543752,
          "_random_generator": {
            "_seed": 3095543758,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 968962777,
          "_random_generator": {
            "_seed": 968962780,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 1.0,
        "_min_std": "None",
        "_max_std": 2.0,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "obs_dim": 3.0,
        "action_dim": 2.0,
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
        "_cached_params": [
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "given_task": {
            "$type": "garage.tf.models.model.given_task"
          },
          "loss_policy": {
            "$type": "garage.tf.models.model.loss_policy"
          }
        },
        "_default_parameters": "None",
        "_output_dim": 2.0,
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_init_std_param": 0.0,
        "_min_std_param": "None",
        "_max_std_param": 0.6931471805599453,
        "_f_dist_obs_latent": {
          "$type": "builtins.function"
        },
        "_f_dist_obs_task": {
          "$type": "builtins.function"
        },
        "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
      },
      {
        "_env_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "policy",
        "_encoder": {
          "_name": "embedding",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
          "_cached_params": [
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
            "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
          ],
          "_cached_param_shapes": "None",
          "_embedding_spec": {
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                4
              ],
              "low": "array([0., 0., 0., 0.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.InOutSpec"
          },
          "_hidden_sizes": [
            20,
            20
          ],
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_layer_normalization": false,
          "_latent_dim": 4.0,
          "_input_dim": 4.0,
          "_network": {
            "$type": "garage.tf.models.model.default"
          },
          "_f_dist": {
            "$type": "builtins.function"
          },
          "model": {
            "_name": "GaussianMLPModel",
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
            "_cached_params": "None",
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "encoder": {
                "$type": "garage.tf.models.model.encoder"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_hidden_sizes": [
              20,
              20
            ],
            "_output_dim": 4.0,
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_init_std": 0.1,
            "_min_std": 1e-06,
            "_max_std": 0.2,
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 1407969796,
              "_random_generator": {
                "_seed": 1407969806,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
            "_output_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095295623,
              "_random_generator": {
                "_seed": 3095295628,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
            "_layer_normalization": false,
            "_init_std_param": -2.3025850929940455,
            "_min_std_param": -13.815510557964274,
            "_max_std_param": -1.6094379124341005,
            "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
          },
          "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
        },
        "_augmented_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            7
          ],
          "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
          "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
          "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
          "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_hidden_sizes": [
          32,
          16
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095543752,
          "_random_generator": {
            "_seed": 3095543758,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 968962777,
          "_random_generator": {
            "_seed": 968962780,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 1.0,
        "_min_std": "None",
        "_max_std": 2.0,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "obs_dim": 3.0,
        "action_dim": 2.0,
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
        "_cached_params": [
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
          "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
          "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
        ],
        "_cached_param_shapes": "None",
        "_networks": {
          "default": {
            "$type": "garage.tf.models.model.default"
          },
          "given_task": {
            "$type": "garage.tf.models.model.given_task"
          },
          "loss_policy": {
            "$type": "garage.tf.models.model.loss_policy"
          }
        },
        "_default_parameters": "None",
        "_output_dim": 2.0,
        "_std_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3546074414,
          "_random_generator": {
            "_seed": 3546074414,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
        "_std_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3967489603,
          "_random_generator": {
            "_seed": 3967489603,
            "_force_generator": false,
            "_built": false,
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_init_std_param": 0.0,
        "_min_std_param": "None",
        "_max_std_param": 0.6931471805599453,
        "_f_dist_obs_latent": {
          "$type": "builtins.function"
        },
        "_f_dist_obs_task": {
          "$type": "builtins.function"
        },
        "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
      }
    ],
    "_envs": [
      {
        "_sample_strategy": {
          "$type": "builtins.function"
        },
        "_num_tasks": 4,
        "_active_task_index": "None",
        "_mode": "vanilla",
        "_env": {
          "_goal": "array([0., 3.], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([0., 3.], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        "_env_names": "None",
        "_task_envs": [
          {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          }
        ],
        "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
      },
      {
        "_sample_strategy": {
          "$type": "builtins.function"
        },
        "_num_tasks": 4,
        "_active_task_index": "None",
        "_mode": "vanilla",
        "_env": {
          "_goal": "array([0., 3.], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([0., 3.], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        "_env_names": "None",
        "_task_envs": [
          {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          }
        ],
        "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
      },
      {
        "_sample_strategy": {
          "$type": "builtins.function"
        },
        "_num_tasks": 4,
        "_active_task_index": "None",
        "_mode": "vanilla",
        "_env": {
          "_goal": "array([0., 3.], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([0., 3.], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        "_env_names": "None",
        "_task_envs": [
          {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          }
        ],
        "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
      },
      {
        "_sample_strategy": {
          "$type": "builtins.function"
        },
        "_num_tasks": 4,
        "_active_task_index": "None",
        "_mode": "vanilla",
        "_env": {
          "_goal": "array([0., 3.], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([0., 3.], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        "_env_names": "None",
        "_task_envs": [
          {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          }
        ],
        "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
      },
      {
        "_sample_strategy": {
          "$type": "builtins.function"
        },
        "_num_tasks": 4,
        "_active_task_index": "None",
        "_mode": "vanilla",
        "_env": {
          "_goal": "array([0., 3.], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([0., 3.], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        "_env_names": "None",
        "_task_envs": [
          {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          }
        ],
        "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
      },
      {
        "_sample_strategy": {
          "$type": "builtins.function"
        },
        "_num_tasks": 4,
        "_active_task_index": "None",
        "_mode": "vanilla",
        "_env": {
          "_goal": "array([0., 3.], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([0., 3.], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        "_env_names": "None",
        "_task_envs": [
          {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          }
        ],
        "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
      },
      {
        "_sample_strategy": {
          "$type": "builtins.function"
        },
        "_num_tasks": 4,
        "_active_task_index": "None",
        "_mode": "vanilla",
        "_env": {
          "_goal": "array([0., 3.], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([0., 3.], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        "_env_names": "None",
        "_task_envs": [
          {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          }
        ],
        "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
      },
      {
        "_sample_strategy": {
          "$type": "builtins.function"
        },
        "_num_tasks": 4,
        "_active_task_index": "None",
        "_mode": "vanilla",
        "_env": {
          "_goal": "array([0., 3.], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([0., 3.], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        "_env_names": "None",
        "_task_envs": [
          {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          }
        ],
        "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
      },
      {
        "_sample_strategy": {
          "$type": "builtins.function"
        },
        "_num_tasks": 4,
        "_active_task_index": "None",
        "_mode": "vanilla",
        "_env": {
          "_goal": "array([0., 3.], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([0., 3.], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        "_env_names": "None",
        "_task_envs": [
          {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          }
        ],
        "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
      },
      {
        "_sample_strategy": {
          "$type": "builtins.function"
        },
        "_num_tasks": 4,
        "_active_task_index": "None",
        "_mode": "vanilla",
        "_env": {
          "_goal": "array([0., 3.], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([0., 3.], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        "_env_names": "None",
        "_task_envs": [
          {
            "_goal": "array([0., 3.], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([0., 3.], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          },
          {
            "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
            "_done_bonus": 10.0,
            "_never_done": false,
            "_arena_size": 5.0,
            "_step_cnt": "None",
            "_max_episode_length": 100,
            "_visualize": false,
            "_point": "array([0., 0.], dtype=float32)",
            "_task": {
              "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_action_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "$type": "garage.envs.point_env.PointEnv"
          }
        ],
        "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
      }
    ],
    "_workers": [
      {
        "_inner_worker": {
          "_latents": [],
          "_tasks": [],
          "_latent_infos": {},
          "_z": "None",
          "_t": "None",
          "_latent_info": "None",
          "_seed": "None",
          "_max_episode_length": 100,
          "_worker_number": 0,
          "agent": {
            "_env_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "policy",
            "_encoder": {
              "_name": "embedding",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
              "_cached_params": [
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_embedding_spec": {
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.InOutSpec"
              },
              "_hidden_sizes": [
                20,
                20
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "_latent_dim": 4.0,
              "_input_dim": 4.0,
              "_network": {
                "$type": "garage.tf.models.model.default"
              },
              "_f_dist": {
                "$type": "builtins.function"
              },
              "model": {
                "_name": "GaussianMLPModel",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                "_cached_params": "None",
                "_cached_param_shapes": "None",
                "_networks": {
                  "default": {
                    "$type": "garage.tf.models.model.default"
                  },
                  "encoder": {
                    "$type": "garage.tf.models.model.encoder"
                  },
                  "loss_policy": {
                    "$type": "garage.tf.models.model.loss_policy"
                  }
                },
                "_default_parameters": "None",
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_output_dim": 4.0,
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3546074414,
                  "_random_generator": {
                    "_seed": 3546074414,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3967489603,
                  "_random_generator": {
                    "_seed": 3967489603,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_layer_normalization": false,
                "_init_std_param": -2.3025850929940455,
                "_min_std_param": -13.815510557964274,
                "_max_std_param": -1.6094379124341005,
                "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
              },
              "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
            },
            "_augmented_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                7
              ],
              "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
              "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
              "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
              "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_hidden_sizes": [
              32,
              16
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095543752,
              "_random_generator": {
                "_seed": 3095543758,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 968962777,
              "_random_generator": {
                "_seed": 968962780,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 1.0,
            "_min_std": "None",
            "_max_std": 2.0,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "obs_dim": 3.0,
            "action_dim": 2.0,
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
            "_cached_params": [
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "given_task": {
                "$type": "garage.tf.models.model.given_task"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_output_dim": 2.0,
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_init_std_param": 0.0,
            "_min_std_param": "None",
            "_max_std_param": 0.6931471805599453,
            "_f_dist_obs_latent": {
              "$type": "builtins.function"
            },
            "_f_dist_obs_task": {
              "$type": "builtins.function"
            },
            "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
          },
          "env": {
            "_sample_strategy": {
              "$type": "builtins.function"
            },
            "_num_tasks": 4,
            "_active_task_index": "None",
            "_mode": "vanilla",
            "_env": {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            "_env_names": "None",
            "_task_envs": [
              {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              }
            ],
            "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
        },
        "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
        "_sess_entered": "None",
        "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
      },
      {
        "_inner_worker": {
          "_latents": [],
          "_tasks": [],
          "_latent_infos": {},
          "_z": "None",
          "_t": "None",
          "_latent_info": "None",
          "_seed": "None",
          "_max_episode_length": 100,
          "_worker_number": 1,
          "agent": {
            "_env_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "policy",
            "_encoder": {
              "_name": "embedding",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
              "_cached_params": [
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_embedding_spec": {
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.InOutSpec"
              },
              "_hidden_sizes": [
                20,
                20
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "_latent_dim": 4.0,
              "_input_dim": 4.0,
              "_network": {
                "$type": "garage.tf.models.model.default"
              },
              "_f_dist": {
                "$type": "builtins.function"
              },
              "model": {
                "_name": "GaussianMLPModel",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                "_cached_params": "None",
                "_cached_param_shapes": "None",
                "_networks": {
                  "default": {
                    "$type": "garage.tf.models.model.default"
                  },
                  "encoder": {
                    "$type": "garage.tf.models.model.encoder"
                  },
                  "loss_policy": {
                    "$type": "garage.tf.models.model.loss_policy"
                  }
                },
                "_default_parameters": "None",
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_output_dim": 4.0,
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3546074414,
                  "_random_generator": {
                    "_seed": 3546074414,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3967489603,
                  "_random_generator": {
                    "_seed": 3967489603,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_layer_normalization": false,
                "_init_std_param": -2.3025850929940455,
                "_min_std_param": -13.815510557964274,
                "_max_std_param": -1.6094379124341005,
                "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
              },
              "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
            },
            "_augmented_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                7
              ],
              "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
              "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
              "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
              "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_hidden_sizes": [
              32,
              16
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095543752,
              "_random_generator": {
                "_seed": 3095543758,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 968962777,
              "_random_generator": {
                "_seed": 968962780,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 1.0,
            "_min_std": "None",
            "_max_std": 2.0,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "obs_dim": 3.0,
            "action_dim": 2.0,
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
            "_cached_params": [
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "given_task": {
                "$type": "garage.tf.models.model.given_task"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_output_dim": 2.0,
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_init_std_param": 0.0,
            "_min_std_param": "None",
            "_max_std_param": 0.6931471805599453,
            "_f_dist_obs_latent": {
              "$type": "builtins.function"
            },
            "_f_dist_obs_task": {
              "$type": "builtins.function"
            },
            "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
          },
          "env": {
            "_sample_strategy": {
              "$type": "builtins.function"
            },
            "_num_tasks": 4,
            "_active_task_index": "None",
            "_mode": "vanilla",
            "_env": {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            "_env_names": "None",
            "_task_envs": [
              {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              }
            ],
            "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
        },
        "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
        "_sess_entered": "None",
        "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
      },
      {
        "_inner_worker": {
          "_latents": [],
          "_tasks": [],
          "_latent_infos": {},
          "_z": "None",
          "_t": "None",
          "_latent_info": "None",
          "_seed": "None",
          "_max_episode_length": 100,
          "_worker_number": 2,
          "agent": {
            "_env_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "policy",
            "_encoder": {
              "_name": "embedding",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
              "_cached_params": [
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_embedding_spec": {
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.InOutSpec"
              },
              "_hidden_sizes": [
                20,
                20
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "_latent_dim": 4.0,
              "_input_dim": 4.0,
              "_network": {
                "$type": "garage.tf.models.model.default"
              },
              "_f_dist": {
                "$type": "builtins.function"
              },
              "model": {
                "_name": "GaussianMLPModel",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                "_cached_params": "None",
                "_cached_param_shapes": "None",
                "_networks": {
                  "default": {
                    "$type": "garage.tf.models.model.default"
                  },
                  "encoder": {
                    "$type": "garage.tf.models.model.encoder"
                  },
                  "loss_policy": {
                    "$type": "garage.tf.models.model.loss_policy"
                  }
                },
                "_default_parameters": "None",
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_output_dim": 4.0,
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3546074414,
                  "_random_generator": {
                    "_seed": 3546074414,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3967489603,
                  "_random_generator": {
                    "_seed": 3967489603,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_layer_normalization": false,
                "_init_std_param": -2.3025850929940455,
                "_min_std_param": -13.815510557964274,
                "_max_std_param": -1.6094379124341005,
                "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
              },
              "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
            },
            "_augmented_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                7
              ],
              "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
              "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
              "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
              "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_hidden_sizes": [
              32,
              16
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095543752,
              "_random_generator": {
                "_seed": 3095543758,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 968962777,
              "_random_generator": {
                "_seed": 968962780,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 1.0,
            "_min_std": "None",
            "_max_std": 2.0,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "obs_dim": 3.0,
            "action_dim": 2.0,
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
            "_cached_params": [
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "given_task": {
                "$type": "garage.tf.models.model.given_task"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_output_dim": 2.0,
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_init_std_param": 0.0,
            "_min_std_param": "None",
            "_max_std_param": 0.6931471805599453,
            "_f_dist_obs_latent": {
              "$type": "builtins.function"
            },
            "_f_dist_obs_task": {
              "$type": "builtins.function"
            },
            "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
          },
          "env": {
            "_sample_strategy": {
              "$type": "builtins.function"
            },
            "_num_tasks": 4,
            "_active_task_index": "None",
            "_mode": "vanilla",
            "_env": {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            "_env_names": "None",
            "_task_envs": [
              {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              }
            ],
            "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
        },
        "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
        "_sess_entered": "None",
        "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
      },
      {
        "_inner_worker": {
          "_latents": [],
          "_tasks": [],
          "_latent_infos": {},
          "_z": "None",
          "_t": "None",
          "_latent_info": "None",
          "_seed": "None",
          "_max_episode_length": 100,
          "_worker_number": 3,
          "agent": {
            "_env_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "policy",
            "_encoder": {
              "_name": "embedding",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
              "_cached_params": [
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_embedding_spec": {
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.InOutSpec"
              },
              "_hidden_sizes": [
                20,
                20
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "_latent_dim": 4.0,
              "_input_dim": 4.0,
              "_network": {
                "$type": "garage.tf.models.model.default"
              },
              "_f_dist": {
                "$type": "builtins.function"
              },
              "model": {
                "_name": "GaussianMLPModel",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                "_cached_params": "None",
                "_cached_param_shapes": "None",
                "_networks": {
                  "default": {
                    "$type": "garage.tf.models.model.default"
                  },
                  "encoder": {
                    "$type": "garage.tf.models.model.encoder"
                  },
                  "loss_policy": {
                    "$type": "garage.tf.models.model.loss_policy"
                  }
                },
                "_default_parameters": "None",
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_output_dim": 4.0,
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3546074414,
                  "_random_generator": {
                    "_seed": 3546074414,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3967489603,
                  "_random_generator": {
                    "_seed": 3967489603,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_layer_normalization": false,
                "_init_std_param": -2.3025850929940455,
                "_min_std_param": -13.815510557964274,
                "_max_std_param": -1.6094379124341005,
                "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
              },
              "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
            },
            "_augmented_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                7
              ],
              "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
              "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
              "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
              "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_hidden_sizes": [
              32,
              16
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095543752,
              "_random_generator": {
                "_seed": 3095543758,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 968962777,
              "_random_generator": {
                "_seed": 968962780,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 1.0,
            "_min_std": "None",
            "_max_std": 2.0,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "obs_dim": 3.0,
            "action_dim": 2.0,
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
            "_cached_params": [
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "given_task": {
                "$type": "garage.tf.models.model.given_task"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_output_dim": 2.0,
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_init_std_param": 0.0,
            "_min_std_param": "None",
            "_max_std_param": 0.6931471805599453,
            "_f_dist_obs_latent": {
              "$type": "builtins.function"
            },
            "_f_dist_obs_task": {
              "$type": "builtins.function"
            },
            "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
          },
          "env": {
            "_sample_strategy": {
              "$type": "builtins.function"
            },
            "_num_tasks": 4,
            "_active_task_index": "None",
            "_mode": "vanilla",
            "_env": {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            "_env_names": "None",
            "_task_envs": [
              {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              }
            ],
            "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
        },
        "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
        "_sess_entered": "None",
        "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
      },
      {
        "_inner_worker": {
          "_latents": [],
          "_tasks": [],
          "_latent_infos": {},
          "_z": "None",
          "_t": "None",
          "_latent_info": "None",
          "_seed": "None",
          "_max_episode_length": 100,
          "_worker_number": 4,
          "agent": {
            "_env_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "policy",
            "_encoder": {
              "_name": "embedding",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
              "_cached_params": [
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_embedding_spec": {
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.InOutSpec"
              },
              "_hidden_sizes": [
                20,
                20
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "_latent_dim": 4.0,
              "_input_dim": 4.0,
              "_network": {
                "$type": "garage.tf.models.model.default"
              },
              "_f_dist": {
                "$type": "builtins.function"
              },
              "model": {
                "_name": "GaussianMLPModel",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                "_cached_params": "None",
                "_cached_param_shapes": "None",
                "_networks": {
                  "default": {
                    "$type": "garage.tf.models.model.default"
                  },
                  "encoder": {
                    "$type": "garage.tf.models.model.encoder"
                  },
                  "loss_policy": {
                    "$type": "garage.tf.models.model.loss_policy"
                  }
                },
                "_default_parameters": "None",
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_output_dim": 4.0,
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3546074414,
                  "_random_generator": {
                    "_seed": 3546074414,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3967489603,
                  "_random_generator": {
                    "_seed": 3967489603,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_layer_normalization": false,
                "_init_std_param": -2.3025850929940455,
                "_min_std_param": -13.815510557964274,
                "_max_std_param": -1.6094379124341005,
                "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
              },
              "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
            },
            "_augmented_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                7
              ],
              "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
              "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
              "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
              "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_hidden_sizes": [
              32,
              16
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095543752,
              "_random_generator": {
                "_seed": 3095543758,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 968962777,
              "_random_generator": {
                "_seed": 968962780,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 1.0,
            "_min_std": "None",
            "_max_std": 2.0,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "obs_dim": 3.0,
            "action_dim": 2.0,
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
            "_cached_params": [
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "given_task": {
                "$type": "garage.tf.models.model.given_task"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_output_dim": 2.0,
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_init_std_param": 0.0,
            "_min_std_param": "None",
            "_max_std_param": 0.6931471805599453,
            "_f_dist_obs_latent": {
              "$type": "builtins.function"
            },
            "_f_dist_obs_task": {
              "$type": "builtins.function"
            },
            "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
          },
          "env": {
            "_sample_strategy": {
              "$type": "builtins.function"
            },
            "_num_tasks": 4,
            "_active_task_index": "None",
            "_mode": "vanilla",
            "_env": {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            "_env_names": "None",
            "_task_envs": [
              {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              }
            ],
            "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
        },
        "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
        "_sess_entered": "None",
        "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
      },
      {
        "_inner_worker": {
          "_latents": [],
          "_tasks": [],
          "_latent_infos": {},
          "_z": "None",
          "_t": "None",
          "_latent_info": "None",
          "_seed": "None",
          "_max_episode_length": 100,
          "_worker_number": 5,
          "agent": {
            "_env_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "policy",
            "_encoder": {
              "_name": "embedding",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
              "_cached_params": [
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_embedding_spec": {
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.InOutSpec"
              },
              "_hidden_sizes": [
                20,
                20
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "_latent_dim": 4.0,
              "_input_dim": 4.0,
              "_network": {
                "$type": "garage.tf.models.model.default"
              },
              "_f_dist": {
                "$type": "builtins.function"
              },
              "model": {
                "_name": "GaussianMLPModel",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                "_cached_params": "None",
                "_cached_param_shapes": "None",
                "_networks": {
                  "default": {
                    "$type": "garage.tf.models.model.default"
                  },
                  "encoder": {
                    "$type": "garage.tf.models.model.encoder"
                  },
                  "loss_policy": {
                    "$type": "garage.tf.models.model.loss_policy"
                  }
                },
                "_default_parameters": "None",
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_output_dim": 4.0,
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3546074414,
                  "_random_generator": {
                    "_seed": 3546074414,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3967489603,
                  "_random_generator": {
                    "_seed": 3967489603,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_layer_normalization": false,
                "_init_std_param": -2.3025850929940455,
                "_min_std_param": -13.815510557964274,
                "_max_std_param": -1.6094379124341005,
                "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
              },
              "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
            },
            "_augmented_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                7
              ],
              "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
              "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
              "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
              "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_hidden_sizes": [
              32,
              16
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095543752,
              "_random_generator": {
                "_seed": 3095543758,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 968962777,
              "_random_generator": {
                "_seed": 968962780,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 1.0,
            "_min_std": "None",
            "_max_std": 2.0,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "obs_dim": 3.0,
            "action_dim": 2.0,
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
            "_cached_params": [
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "given_task": {
                "$type": "garage.tf.models.model.given_task"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_output_dim": 2.0,
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_init_std_param": 0.0,
            "_min_std_param": "None",
            "_max_std_param": 0.6931471805599453,
            "_f_dist_obs_latent": {
              "$type": "builtins.function"
            },
            "_f_dist_obs_task": {
              "$type": "builtins.function"
            },
            "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
          },
          "env": {
            "_sample_strategy": {
              "$type": "builtins.function"
            },
            "_num_tasks": 4,
            "_active_task_index": "None",
            "_mode": "vanilla",
            "_env": {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            "_env_names": "None",
            "_task_envs": [
              {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              }
            ],
            "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
        },
        "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
        "_sess_entered": "None",
        "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
      },
      {
        "_inner_worker": {
          "_latents": [],
          "_tasks": [],
          "_latent_infos": {},
          "_z": "None",
          "_t": "None",
          "_latent_info": "None",
          "_seed": "None",
          "_max_episode_length": 100,
          "_worker_number": 6,
          "agent": {
            "_env_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "policy",
            "_encoder": {
              "_name": "embedding",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
              "_cached_params": [
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_embedding_spec": {
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.InOutSpec"
              },
              "_hidden_sizes": [
                20,
                20
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "_latent_dim": 4.0,
              "_input_dim": 4.0,
              "_network": {
                "$type": "garage.tf.models.model.default"
              },
              "_f_dist": {
                "$type": "builtins.function"
              },
              "model": {
                "_name": "GaussianMLPModel",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                "_cached_params": "None",
                "_cached_param_shapes": "None",
                "_networks": {
                  "default": {
                    "$type": "garage.tf.models.model.default"
                  },
                  "encoder": {
                    "$type": "garage.tf.models.model.encoder"
                  },
                  "loss_policy": {
                    "$type": "garage.tf.models.model.loss_policy"
                  }
                },
                "_default_parameters": "None",
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_output_dim": 4.0,
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3546074414,
                  "_random_generator": {
                    "_seed": 3546074414,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3967489603,
                  "_random_generator": {
                    "_seed": 3967489603,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_layer_normalization": false,
                "_init_std_param": -2.3025850929940455,
                "_min_std_param": -13.815510557964274,
                "_max_std_param": -1.6094379124341005,
                "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
              },
              "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
            },
            "_augmented_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                7
              ],
              "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
              "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
              "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
              "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_hidden_sizes": [
              32,
              16
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095543752,
              "_random_generator": {
                "_seed": 3095543758,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 968962777,
              "_random_generator": {
                "_seed": 968962780,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 1.0,
            "_min_std": "None",
            "_max_std": 2.0,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "obs_dim": 3.0,
            "action_dim": 2.0,
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
            "_cached_params": [
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "given_task": {
                "$type": "garage.tf.models.model.given_task"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_output_dim": 2.0,
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_init_std_param": 0.0,
            "_min_std_param": "None",
            "_max_std_param": 0.6931471805599453,
            "_f_dist_obs_latent": {
              "$type": "builtins.function"
            },
            "_f_dist_obs_task": {
              "$type": "builtins.function"
            },
            "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
          },
          "env": {
            "_sample_strategy": {
              "$type": "builtins.function"
            },
            "_num_tasks": 4,
            "_active_task_index": "None",
            "_mode": "vanilla",
            "_env": {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            "_env_names": "None",
            "_task_envs": [
              {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              }
            ],
            "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
        },
        "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
        "_sess_entered": "None",
        "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
      },
      {
        "_inner_worker": {
          "_latents": [],
          "_tasks": [],
          "_latent_infos": {},
          "_z": "None",
          "_t": "None",
          "_latent_info": "None",
          "_seed": "None",
          "_max_episode_length": 100,
          "_worker_number": 7,
          "agent": {
            "_env_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "policy",
            "_encoder": {
              "_name": "embedding",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
              "_cached_params": [
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_embedding_spec": {
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.InOutSpec"
              },
              "_hidden_sizes": [
                20,
                20
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "_latent_dim": 4.0,
              "_input_dim": 4.0,
              "_network": {
                "$type": "garage.tf.models.model.default"
              },
              "_f_dist": {
                "$type": "builtins.function"
              },
              "model": {
                "_name": "GaussianMLPModel",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                "_cached_params": "None",
                "_cached_param_shapes": "None",
                "_networks": {
                  "default": {
                    "$type": "garage.tf.models.model.default"
                  },
                  "encoder": {
                    "$type": "garage.tf.models.model.encoder"
                  },
                  "loss_policy": {
                    "$type": "garage.tf.models.model.loss_policy"
                  }
                },
                "_default_parameters": "None",
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_output_dim": 4.0,
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3546074414,
                  "_random_generator": {
                    "_seed": 3546074414,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3967489603,
                  "_random_generator": {
                    "_seed": 3967489603,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_layer_normalization": false,
                "_init_std_param": -2.3025850929940455,
                "_min_std_param": -13.815510557964274,
                "_max_std_param": -1.6094379124341005,
                "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
              },
              "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
            },
            "_augmented_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                7
              ],
              "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
              "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
              "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
              "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_hidden_sizes": [
              32,
              16
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095543752,
              "_random_generator": {
                "_seed": 3095543758,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 968962777,
              "_random_generator": {
                "_seed": 968962780,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 1.0,
            "_min_std": "None",
            "_max_std": 2.0,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "obs_dim": 3.0,
            "action_dim": 2.0,
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
            "_cached_params": [
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "given_task": {
                "$type": "garage.tf.models.model.given_task"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_output_dim": 2.0,
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_init_std_param": 0.0,
            "_min_std_param": "None",
            "_max_std_param": 0.6931471805599453,
            "_f_dist_obs_latent": {
              "$type": "builtins.function"
            },
            "_f_dist_obs_task": {
              "$type": "builtins.function"
            },
            "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
          },
          "env": {
            "_sample_strategy": {
              "$type": "builtins.function"
            },
            "_num_tasks": 4,
            "_active_task_index": "None",
            "_mode": "vanilla",
            "_env": {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            "_env_names": "None",
            "_task_envs": [
              {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              }
            ],
            "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
        },
        "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
        "_sess_entered": "None",
        "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
      },
      {
        "_inner_worker": {
          "_latents": [],
          "_tasks": [],
          "_latent_infos": {},
          "_z": "None",
          "_t": "None",
          "_latent_info": "None",
          "_seed": "None",
          "_max_episode_length": 100,
          "_worker_number": 8,
          "agent": {
            "_env_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "policy",
            "_encoder": {
              "_name": "embedding",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
              "_cached_params": [
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_embedding_spec": {
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.InOutSpec"
              },
              "_hidden_sizes": [
                20,
                20
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "_latent_dim": 4.0,
              "_input_dim": 4.0,
              "_network": {
                "$type": "garage.tf.models.model.default"
              },
              "_f_dist": {
                "$type": "builtins.function"
              },
              "model": {
                "_name": "GaussianMLPModel",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                "_cached_params": "None",
                "_cached_param_shapes": "None",
                "_networks": {
                  "default": {
                    "$type": "garage.tf.models.model.default"
                  },
                  "encoder": {
                    "$type": "garage.tf.models.model.encoder"
                  },
                  "loss_policy": {
                    "$type": "garage.tf.models.model.loss_policy"
                  }
                },
                "_default_parameters": "None",
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_output_dim": 4.0,
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3546074414,
                  "_random_generator": {
                    "_seed": 3546074414,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3967489603,
                  "_random_generator": {
                    "_seed": 3967489603,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_layer_normalization": false,
                "_init_std_param": -2.3025850929940455,
                "_min_std_param": -13.815510557964274,
                "_max_std_param": -1.6094379124341005,
                "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
              },
              "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
            },
            "_augmented_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                7
              ],
              "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
              "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
              "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
              "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_hidden_sizes": [
              32,
              16
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095543752,
              "_random_generator": {
                "_seed": 3095543758,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 968962777,
              "_random_generator": {
                "_seed": 968962780,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 1.0,
            "_min_std": "None",
            "_max_std": 2.0,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "obs_dim": 3.0,
            "action_dim": 2.0,
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
            "_cached_params": [
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "given_task": {
                "$type": "garage.tf.models.model.given_task"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_output_dim": 2.0,
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_init_std_param": 0.0,
            "_min_std_param": "None",
            "_max_std_param": 0.6931471805599453,
            "_f_dist_obs_latent": {
              "$type": "builtins.function"
            },
            "_f_dist_obs_task": {
              "$type": "builtins.function"
            },
            "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
          },
          "env": {
            "_sample_strategy": {
              "$type": "builtins.function"
            },
            "_num_tasks": 4,
            "_active_task_index": "None",
            "_mode": "vanilla",
            "_env": {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            "_env_names": "None",
            "_task_envs": [
              {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              }
            ],
            "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
        },
        "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
        "_sess_entered": "None",
        "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
      },
      {
        "_inner_worker": {
          "_latents": [],
          "_tasks": [],
          "_latent_infos": {},
          "_z": "None",
          "_t": "None",
          "_latent_info": "None",
          "_seed": "None",
          "_max_episode_length": 100,
          "_worker_number": 9,
          "agent": {
            "_env_spec": {
              "max_episode_length": 100,
              "input_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "policy",
            "_encoder": {
              "_name": "embedding",
              "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203c0b90>",
              "_cached_params": [
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
                "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
              ],
              "_cached_param_shapes": "None",
              "_embedding_spec": {
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    4
                  ],
                  "low": "array([0., 0., 0., 0.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.InOutSpec"
              },
              "_hidden_sizes": [
                20,
                20
              ],
              "_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_hidden_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 1407969796,
                "_random_generator": {
                  "_seed": 1407969806,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
              "_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_output_w_init": {
                "scale": 1.0,
                "mode": "fan_avg",
                "distribution": "uniform",
                "seed": 3095295623,
                "_random_generator": {
                  "_seed": 3095295628,
                  "_force_generator": false,
                  "_built": true,
                  "_generator": "None",
                  "$type": "keras.backend.RandomGenerator"
                },
                "$type": "keras.initializers.initializers_v2.GlorotUniform"
              },
              "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
              "_learn_std": true,
              "_adaptive_std": false,
              "_std_share_network": true,
              "_init_std": 0.1,
              "_min_std": 1e-06,
              "_max_std": 0.2,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_std_hidden_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": {
                "_tf_api_names": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_api_names_v1": [
                  "math.tanh",
                  "nn.tanh",
                  "tanh"
                ],
                "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                "_tf_fallback_dispatchers": [
                  "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                ],
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_layer_normalization": false,
              "_latent_dim": 4.0,
              "_input_dim": 4.0,
              "_network": {
                "$type": "garage.tf.models.model.default"
              },
              "_f_dist": {
                "$type": "builtins.function"
              },
              "model": {
                "_name": "GaussianMLPModel",
                "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd2203eeb50>",
                "_cached_params": "None",
                "_cached_param_shapes": "None",
                "_networks": {
                  "default": {
                    "$type": "garage.tf.models.model.default"
                  },
                  "encoder": {
                    "$type": "garage.tf.models.model.encoder"
                  },
                  "loss_policy": {
                    "$type": "garage.tf.models.model.loss_policy"
                  }
                },
                "_default_parameters": "None",
                "_hidden_sizes": [
                  20,
                  20
                ],
                "_output_dim": 4.0,
                "_learn_std": true,
                "_adaptive_std": false,
                "_std_share_network": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_init_std": 0.1,
                "_min_std": 1e-06,
                "_max_std": 0.2,
                "_std_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3546074414,
                  "_random_generator": {
                    "_seed": 3546074414,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
                "_std_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_std_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3967489603,
                  "_random_generator": {
                    "_seed": 3967489603,
                    "_force_generator": false,
                    "_built": false,
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_hidden_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 1407969796,
                  "_random_generator": {
                    "_seed": 1407969806,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
                "_output_nonlinearity": {
                  "_tf_api_names": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_api_names_v1": [
                    "math.tanh",
                    "nn.tanh",
                    "tanh"
                  ],
                  "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
                  "_tf_fallback_dispatchers": [
                    "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
                  ],
                  "$type": "builtins.function"
                },
                "_output_w_init": {
                  "scale": 1.0,
                  "mode": "fan_avg",
                  "distribution": "uniform",
                  "seed": 3095295623,
                  "_random_generator": {
                    "_seed": 3095295628,
                    "_force_generator": false,
                    "_built": true,
                    "_generator": "None",
                    "$type": "keras.backend.RandomGenerator"
                  },
                  "$type": "keras.initializers.initializers_v2.GlorotUniform"
                },
                "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
                "_layer_normalization": false,
                "_init_std_param": -2.3025850929940455,
                "_min_std_param": -13.815510557964274,
                "_max_std_param": -1.6094379124341005,
                "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
              },
              "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
            },
            "_augmented_observation_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                7
              ],
              "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
              "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
              "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
              "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_hidden_sizes": [
              32,
              16
            ],
            "_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3095543752,
              "_random_generator": {
                "_seed": 3095543758,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 968962777,
              "_random_generator": {
                "_seed": 968962780,
                "_force_generator": false,
                "_built": true,
                "_generator": "None",
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
            "_learn_std": true,
            "_adaptive_std": false,
            "_std_share_network": true,
            "_init_std": 1.0,
            "_min_std": "None",
            "_max_std": 2.0,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_std_hidden_nonlinearity": {
              "_tf_api_names": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_api_names_v1": [
                "math.tanh",
                "nn.tanh",
                "tanh"
              ],
              "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
              "_tf_fallback_dispatchers": [
                "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
              ],
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_parameterization": "exp",
            "_layer_normalization": false,
            "obs_dim": 3.0,
            "action_dim": 2.0,
            "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd218165d10>",
            "_cached_params": [
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/kernel:0' shape=(7, 32) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_0/bias:0' shape=(32,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/kernel:0' shape=(32, 16) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/hidden_1/bias:0' shape=(16,) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/kernel:0' shape=(16, 4) dtype=float32>",
              "<tf.Variable 'policy/dist_params/mean_std_network/output/bias:0' shape=(4,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/kernel:0' shape=(4, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_0/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/kernel:0' shape=(20, 20) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/hidden_1/bias:0' shape=(20,) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/kernel:0' shape=(20, 8) dtype=float32>",
              "<tf.Variable 'embedding/GaussianMLPModel/dist_params/mean_std_network/output/bias:0' shape=(8,) dtype=float32>"
            ],
            "_cached_param_shapes": "None",
            "_networks": {
              "default": {
                "$type": "garage.tf.models.model.default"
              },
              "given_task": {
                "$type": "garage.tf.models.model.given_task"
              },
              "loss_policy": {
                "$type": "garage.tf.models.model.loss_policy"
              }
            },
            "_default_parameters": "None",
            "_output_dim": 2.0,
            "_std_hidden_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3546074414,
              "_random_generator": {
                "_seed": 3546074414,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
            "_std_output_w_init": {
              "scale": 1.0,
              "mode": "fan_avg",
              "distribution": "uniform",
              "seed": 3967489603,
              "_random_generator": {
                "_seed": 3967489603,
                "_force_generator": false,
                "_built": false,
                "$type": "keras.backend.RandomGenerator"
              },
              "$type": "keras.initializers.initializers_v2.GlorotUniform"
            },
            "_init_std_param": 0.0,
            "_min_std_param": "None",
            "_max_std_param": 0.6931471805599453,
            "_f_dist_obs_latent": {
              "$type": "builtins.function"
            },
            "_f_dist_obs_task": {
              "$type": "builtins.function"
            },
            "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
          },
          "env": {
            "_sample_strategy": {
              "$type": "builtins.function"
            },
            "_num_tasks": 4,
            "_active_task_index": "None",
            "_mode": "vanilla",
            "_env": {
              "_goal": "array([0., 3.], dtype=float32)",
              "_done_bonus": 10.0,
              "_never_done": false,
              "_arena_size": 5.0,
              "_step_cnt": "None",
              "_max_episode_length": 100,
              "_visualize": false,
              "_point": "array([0., 0.], dtype=float32)",
              "_task": {
                "goal": "array([0., 3.], dtype=float32)"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  3
                ],
                "low": "array([-inf, -inf, -inf], dtype=float32)",
                "high": "array([inf, inf, inf], dtype=float32)",
                "bounded_below": "array([False, False, False])",
                "bounded_above": "array([False, False, False])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_action_space": {
                "dtype": "dtype('float32')",
                "_shape": [
                  2
                ],
                "low": "array([-0.1, -0.1], dtype=float32)",
                "high": "array([0.1, 0.1], dtype=float32)",
                "bounded_below": "array([ True,  True])",
                "bounded_above": "array([ True,  True])",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 100,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.point_env.PointEnv"
            },
            "_env_names": "None",
            "_task_envs": [
              {
                "_goal": "array([0., 3.], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([0., 3.], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              },
              {
                "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
                "_done_bonus": 10.0,
                "_never_done": false,
                "_arena_size": 5.0,
                "_step_cnt": "None",
                "_max_episode_length": 100,
                "_visualize": false,
                "_point": "array([0., 0.], dtype=float32)",
                "_task": {
                  "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
                },
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    3
                  ],
                  "low": "array([-inf, -inf, -inf], dtype=float32)",
                  "high": "array([inf, inf, inf], dtype=float32)",
                  "bounded_below": "array([False, False, False])",
                  "bounded_above": "array([False, False, False])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_action_space": {
                  "dtype": "dtype('float32')",
                  "_shape": [
                    2
                  ],
                  "low": "array([-0.1, -0.1], dtype=float32)",
                  "high": "array([0.1, 0.1], dtype=float32)",
                  "bounded_below": "array([ True,  True])",
                  "bounded_above": "array([ True,  True])",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 100,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      2
                    ],
                    "low": "array([-0.1, -0.1], dtype=float32)",
                    "high": "array([0.1, 0.1], dtype=float32)",
                    "bounded_below": "array([ True,  True])",
                    "bounded_above": "array([ True,  True])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "_shape": [
                      3
                    ],
                    "low": "array([-inf, -inf, -inf], dtype=float32)",
                    "high": "array([inf, inf, inf], dtype=float32)",
                    "bounded_below": "array([False, False, False])",
                    "bounded_above": "array([False, False, False])",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.point_env.PointEnv"
              }
            ],
            "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.tf.algos.te.TaskEmbeddingWorker"
        },
        "_sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
        "_sess_entered": "None",
        "$type": "garage.tf.samplers.worker.TFWorkerWrapper"
      }
    ],
    "total_env_steps": 0,
    "$type": "garage.sampler.local_sampler.LocalSampler"
  },
  "_plotter": {
    "_env": {
      "_sample_strategy": {
        "$type": "builtins.function"
      },
      "_num_tasks": 4,
      "_active_task_index": "None",
      "_mode": "vanilla",
      "_env": {
        "_goal": "array([0., 3.], dtype=float32)",
        "_done_bonus": 10.0,
        "_never_done": false,
        "_arena_size": 5.0,
        "_step_cnt": "None",
        "_max_episode_length": 100,
        "_visualize": false,
        "_point": "array([0., 0.], dtype=float32)",
        "_task": {
          "goal": "array([0., 3.], dtype=float32)"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            3
          ],
          "low": "array([-inf, -inf, -inf], dtype=float32)",
          "high": "array([inf, inf, inf], dtype=float32)",
          "bounded_below": "array([False, False, False])",
          "bounded_above": "array([False, False, False])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_action_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            2
          ],
          "low": "array([-0.1, -0.1], dtype=float32)",
          "high": "array([0.1, 0.1], dtype=float32)",
          "bounded_below": "array([ True,  True])",
          "bounded_above": "array([ True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 100,
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.point_env.PointEnv"
      },
      "_env_names": "None",
      "_task_envs": [
        {
          "_goal": "array([0., 3.], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([0., 3.], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        {
          "_goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([3.0000000e+00, 1.8369701e-16], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        {
          "_goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([ 3.6739403e-16, -3.0000000e+00], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        },
        {
          "_goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)",
          "_done_bonus": 10.0,
          "_never_done": false,
          "_arena_size": 5.0,
          "_step_cnt": "None",
          "_max_episode_length": 100,
          "_visualize": false,
          "_point": "array([0., 0.], dtype=float32)",
          "_task": {
            "goal": "array([-3.0000000e+00, -5.5109107e-16], dtype=float32)"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              3
            ],
            "low": "array([-inf, -inf, -inf], dtype=float32)",
            "high": "array([inf, inf, inf], dtype=float32)",
            "bounded_below": "array([False, False, False])",
            "bounded_above": "array([False, False, False])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_action_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              2
            ],
            "low": "array([-0.1, -0.1], dtype=float32)",
            "high": "array([0.1, 0.1], dtype=float32)",
            "bounded_below": "array([ True,  True])",
            "bounded_above": "array([ True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 100,
            "input_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                2
              ],
              "low": "array([-0.1, -0.1], dtype=float32)",
              "high": "array([0.1, 0.1], dtype=float32)",
              "bounded_below": "array([ True,  True])",
              "bounded_above": "array([ True,  True])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "_shape": [
                3
              ],
              "low": "array([-inf, -inf, -inf], dtype=float32)",
              "high": "array([inf, inf, inf], dtype=float32)",
              "bounded_below": "array([False, False, False])",
              "bounded_above": "array([False, False, False])",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "$type": "garage.envs.point_env.PointEnv"
        }
      ],
      "$type": "garage.envs.multi_env_wrapper.MultiEnvWrapper"
    },
    "sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
    "graph": "<tensorflow.python.framework.ops.Graph object at 0x7fd2203d5810>",
    "_policy": {
      "_env_spec": {
        "max_episode_length": 100,
        "input_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            2
          ],
          "low": "array([-0.1, -0.1], dtype=float32)",
          "high": "array([0.1, 0.1], dtype=float32)",
          "bounded_below": "array([ True,  True])",
          "bounded_above": "array([ True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "_shape": [
            3
          ],
          "low": "array([-inf, -inf, -inf], dtype=float32)",
          "high": "array([inf, inf, inf], dtype=float32)",
          "bounded_below": "array([False, False, False])",
          "bounded_above": "array([False, False, False])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "plotter_policy",
      "_encoder": {
        "_name": "plotter_policy_encoder",
        "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd1b16a3cd0>",
        "_cached_params": "None",
        "_cached_param_shapes": "None",
        "_embedding_spec": {
          "input_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              4
            ],
            "low": "array([0., 0., 0., 0.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "_shape": [
              4
            ],
            "low": "array([0., 0., 0., 0.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.InOutSpec"
        },
        "_hidden_sizes": [
          20,
          20
        ],
        "_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_hidden_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 1407969796,
          "_random_generator": {
            "_seed": 1407969806,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
        "_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_output_w_init": {
          "scale": 1.0,
          "mode": "fan_avg",
          "distribution": "uniform",
          "seed": 3095295623,
          "_random_generator": {
            "_seed": 3095295628,
            "_force_generator": false,
            "_built": true,
            "_generator": "None",
            "$type": "keras.backend.RandomGenerator"
          },
          "$type": "keras.initializers.initializers_v2.GlorotUniform"
        },
        "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
        "_learn_std": true,
        "_adaptive_std": false,
        "_std_share_network": true,
        "_init_std": 0.1,
        "_min_std": 1e-06,
        "_max_std": 0.2,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_std_hidden_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": {
          "_tf_api_names": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_api_names_v1": [
            "math.tanh",
            "nn.tanh",
            "tanh"
          ],
          "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
          "_tf_fallback_dispatchers": [
            "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
          ],
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_layer_normalization": false,
        "_latent_dim": 4.0,
        "_input_dim": 4.0,
        "_network": {
          "$type": "garage.tf.models.model.default"
        },
        "_f_dist": {
          "$type": "builtins.function"
        },
        "model": {
          "_name": "GaussianMLPModel",
          "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd1b16b2050>",
          "_cached_params": "None",
          "_cached_param_shapes": "None",
          "_networks": {
            "default": {
              "$type": "garage.tf.models.model.default"
            },
            "encoder": {
              "$type": "garage.tf.models.model.encoder"
            }
          },
          "_default_parameters": "None",
          "_hidden_sizes": [
            20,
            20
          ],
          "_output_dim": 4.0,
          "_learn_std": true,
          "_adaptive_std": false,
          "_std_share_network": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_init_std": 0.1,
          "_min_std": 1e-06,
          "_max_std": 0.2,
          "_std_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3546074414,
            "_random_generator": {
              "_seed": 3546074414,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
          "_std_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_std_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3967489603,
            "_random_generator": {
              "_seed": 3967489603,
              "_force_generator": false,
              "_built": false,
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_hidden_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 1407969796,
            "_random_generator": {
              "_seed": 1407969806,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe0d0>",
          "_output_nonlinearity": {
            "_tf_api_names": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_api_names_v1": [
              "math.tanh",
              "nn.tanh",
              "tanh"
            ],
            "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
            "_tf_fallback_dispatchers": [
              "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
            ],
            "$type": "builtins.function"
          },
          "_output_w_init": {
            "scale": 1.0,
            "mode": "fan_avg",
            "distribution": "uniform",
            "seed": 3095295623,
            "_random_generator": {
              "_seed": 3095295628,
              "_force_generator": false,
              "_built": true,
              "_generator": "None",
              "$type": "keras.backend.RandomGenerator"
            },
            "$type": "keras.initializers.initializers_v2.GlorotUniform"
          },
          "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294fe1d0>",
          "_layer_normalization": false,
          "_init_std_param": -2.3025850929940455,
          "_min_std_param": -13.815510557964274,
          "_max_std_param": -1.6094379124341005,
          "$type": "garage.tf.models.gaussian_mlp_model.GaussianMLPModel"
        },
        "$type": "garage.tf.embeddings.gaussian_mlp_encoder.GaussianMLPEncoder"
      },
      "_augmented_observation_space": {
        "dtype": "dtype('float32')",
        "_shape": [
          7
        ],
        "low": "array([-inf, -inf, -inf,   0.,   0.,   0.,   0.], dtype=float32)",
        "high": "array([inf, inf, inf,  1.,  1.,  1.,  1.], dtype=float32)",
        "bounded_below": "array([False, False, False,  True,  True,  True,  True])",
        "bounded_above": "array([False, False, False,  True,  True,  True,  True])",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "_hidden_sizes": [
        32,
        16
      ],
      "_hidden_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_hidden_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 3095543752,
        "_random_generator": {
          "_seed": 3095543758,
          "_force_generator": false,
          "_built": true,
          "_generator": "None",
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459e90>",
      "_output_nonlinearity": "None",
      "_output_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 968962777,
        "_random_generator": {
          "_seed": 968962780,
          "_force_generator": false,
          "_built": true,
          "_generator": "None",
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_output_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd229459f90>",
      "_learn_std": true,
      "_adaptive_std": false,
      "_std_share_network": true,
      "_init_std": 1.0,
      "_min_std": "None",
      "_max_std": 2.0,
      "_std_hidden_sizes": [
        32,
        32
      ],
      "_std_hidden_nonlinearity": {
        "_tf_api_names": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_api_names_v1": [
          "math.tanh",
          "nn.tanh",
          "tanh"
        ],
        "_tf_type_based_dispatcher": "<Disptach(tanh): args[0]:Union[RaggedTensorValue, RaggedTensor] -> <function elementwise_dispatch_target_for_tanh at 0x7fd28f1b3d40>",
        "_tf_fallback_dispatchers": [
          "<tensorflow.python.ops.sparse_ops._UnaryMapValueDispatcher object at 0x7fd29a1aa2d0>"
        ],
        "$type": "builtins.function"
      },
      "_std_output_nonlinearity": "None",
      "_std_parameterization": "exp",
      "_layer_normalization": false,
      "obs_dim": 3.0,
      "action_dim": 2.0,
      "_variable_scope": "<tensorflow.python.ops.variable_scope.VariableScope object at 0x7fd1b168bd50>",
      "_cached_params": "None",
      "_cached_param_shapes": "None",
      "_networks": {
        "default": {
          "$type": "garage.tf.models.model.default"
        },
        "given_task": {
          "$type": "garage.tf.models.model.given_task"
        }
      },
      "_default_parameters": "None",
      "_output_dim": 2.0,
      "_std_hidden_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 3546074414,
        "_random_generator": {
          "_seed": 3546074414,
          "_force_generator": false,
          "_built": false,
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_std_hidden_b_init": "<tensorflow.python.ops.init_ops_v2.Zeros object at 0x7fd2294f4a50>",
      "_std_output_w_init": {
        "scale": 1.0,
        "mode": "fan_avg",
        "distribution": "uniform",
        "seed": 3967489603,
        "_random_generator": {
          "_seed": 3967489603,
          "_force_generator": false,
          "_built": false,
          "$type": "keras.backend.RandomGenerator"
        },
        "$type": "keras.initializers.initializers_v2.GlorotUniform"
      },
      "_init_std_param": 0.0,
      "_min_std_param": "None",
      "_max_std_param": 0.6931471805599453,
      "_f_dist_obs_latent": {
        "$type": "builtins.function"
      },
      "_f_dist_obs_task": {
        "$type": "builtins.function"
      },
      "$type": "garage.tf.policies.gaussian_mlp_task_embedding_policy.GaussianMLPTaskEmbeddingPolicy"
    },
    "rollout": {
      "$type": "builtins.function"
    },
    "worker_thread": {
      "_target": {
        "$type": "builtins.method"
      },
      "_name": "Thread-22",
      "_args": [],
      "_kwargs": {},
      "_daemonic": true,
      "_ident": 140538591487744,
      "_tstate_lock": "<locked _thread.lock object at 0x7fd1b158ab70>",
      "_started": {
        "_cond": {
          "_lock": "<unlocked _thread.lock object at 0x7fd1b16ab7e0>",
          "acquire": "<built-in method acquire of _thread.lock object at 0x7fd1b16ab7e0>",
          "release": "<built-in method release of _thread.lock object at 0x7fd1b16ab7e0>",
          "_waiters": [],
          "$type": "threading.Condition"
        },
        "_flag": true,
        "$type": "threading.Event"
      },
      "_is_stopped": false,
      "_initialized": true,
      "_stderr": {
        "mode": "w",
        "write": {
          "$type": "builtins.function"
        },
        "$type": "_io.TextIOWrapper"
      },
      "$type": "threading.Thread"
    },
    "queue": {
      "maxsize": 0,
      "queue": [],
      "mutex": "<unlocked _thread.lock object at 0x7fd2203c4540>",
      "not_empty": {
        "_lock": "<unlocked _thread.lock object at 0x7fd2203c4540>",
        "acquire": "<built-in method acquire of _thread.lock object at 0x7fd2203c4540>",
        "release": "<built-in method release of _thread.lock object at 0x7fd2203c4540>",
        "_waiters": [
          "<locked _thread.lock object at 0x7fd1b158ac60>"
        ],
        "$type": "threading.Condition"
      },
      "not_full": {
        "_lock": "<unlocked _thread.lock object at 0x7fd2203c4540>",
        "acquire": "<built-in method acquire of _thread.lock object at 0x7fd2203c4540>",
        "release": "<built-in method release of _thread.lock object at 0x7fd2203c4540>",
        "_waiters": [],
        "$type": "threading.Condition"
      },
      "all_tasks_done": {
        "_lock": "<unlocked _thread.lock object at 0x7fd2203c4540>",
        "acquire": "<built-in method acquire of _thread.lock object at 0x7fd2203c4540>",
        "release": "<built-in method release of _thread.lock object at 0x7fd2203c4540>",
        "_waiters": [],
        "$type": "threading.Condition"
      },
      "unfinished_tasks": 0,
      "$type": "queue.Queue"
    },
    "$type": "garage.tf.plotter.plotter.Plotter"
  },
  "_start_time": "None",
  "_itr_start_time": "None",
  "step_itr": "None",
  "step_episode": "None",
  "enable_logging": true,
  "_n_workers": "None",
  "_worker_class": "None",
  "_worker_args": "None",
  "sess": "<tensorflow.python.client.session.Session object at 0x7fd2203d52d0>",
  "sess_entered": true,
  "$type": "garage.trainer.TFTrainer"
}